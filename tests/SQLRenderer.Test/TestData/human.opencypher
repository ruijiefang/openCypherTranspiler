["MATCH (P1:N$PERSON)-[:E$WORKSAT]->()<-[:E$WORKSAT]-(P2:N$PERSON) WHERE NOT (P1)-[:E$FRIENDSWITH]->(P2) AND NOT (P1)<-[:E$FRIENDSWITH]-(P2) AND ABS(P1.BORN-P2.BORN) < 5 RETURN P1.PERSID, P1.NAME, P1.BORN, P2.PERSID, P2.NAME, P2.BORN", "./TestData/openschemas_human/stackoverflow_001.json"]
["MATCH (N:N$NODE) WHERE [N.ID, N.CODE] IN [[1234,'PQR'], [4567, 'ABC']] RETURN N.ID, N.CODE", "./TestData/openschemas_human/stackoverflow_002.json"]
["MATCH (C:N$CUSTOMER)-[:E$HAS_ORDER]->(O:N$SORDER) WHERE O.STATUS = 'DELIVERED' RETURN C.ID, O.ID, O.STATUS", "./TestData/openschemas_human/stackoverflow_003.json"]
["MATCH (M:N$MYTABLE) WHERE M.COUNTRY IN ['NIGERIA', 'SWEDEN']  WITH M.COUNTRY AS COUNTRY, M.NAME AS NAME, COUNT(M.COUNTRY) AS COUNTRYCOUNT RETURN NAME, COUNTRYCOUNT", "./TestData/openschemas_human/stackoverflow_004.json"]
["MATCH (M:N$MOVIE) WHERE M.BADMOVIE = FALSE RETURN M.ID, M.TITLE", "./TestData/openschemas_human/stackoverflow_005.json"]
["MATCH (U {USERID: 1})-[:E$SUBSCRIBES_TO]->(C)<-[B:E$BELONGS_TO]-(T) RETURN T.TEXTID, T.TEXT", "./TestData/openschemas_human/stackoverflow_006.json"]

["MATCH (A:N$ABC {ID: 1234}) OPTIONAL MATCH (A)-[B:E$XYZ]->(:N$ABC) RETURN COUNT(DISTINCT B.D_ID)", "./TestData/openschemas_human/stackoverflow_008.json"]
["MATCH (B:N$PRODUCTDATA {RESULT_ID: 1 }) WITH B MATCH (B)<-[:E$CREATES_PRODUCTDATA]-(A:N$FACT) RETURN DISTINCT B.RESULT_ID AS RESULT_ID, A.HSHLD_ID AS HSHLD_ID, B.CLUSTER_ID AS PRODUCT_ID", "./TestData/openschemas_human/stackoverflow_009.json"]
["MATCH (B:N$PRODUCTDATA {RESULT_ID: 1 }) WITH B MATCH (B)<-[:E$CREATES_PRODUCTDATA]-(A:N$FACT) RETURN DISTINCT B.RESULT_ID AS RESULT_ID, A.HSHLD_ID AS HSHLD_ID, B.CLUSTER_ID AS PRODUCT_ID", "./TestData/openschemas_human/stackoverflow_010.json"]
["MATCH (P:N$PLANEAIR)-[:E$RELATION]->(N:N$TIMETAB) RETURN N.ENGINETYPE, N.ROCKET20, N.YEAR, N.DISTANCE", "./TestData/openschemas_human/stackoverflow_011.json"]
["MATCH (S:N$STORE) WITH COLLECT(S.STORE_ID) AS STORE_IDS MATCH (E:N$FACT) WITH STORE_IDS, E.PID AS E_PID, COUNT(DISTINCT E.TICKET_ID) AS TICKET_ID_CNT ORDER BY TICKET_ID_CNT DESC LIMIT 3 WITH STORE_IDS, COLLECT(E_PID) AS PRODUCT_IDS MATCH (B:N$PRODUCT) WHERE B.PRODUCT_ID IN PRODUCT_IDS WITH B, STORE_IDS MATCH (A:N$FACT) WHERE A.STORE_ID IN STORE_IDS AND A.PID = B.PRODUCT_ID WITH A, B RETURN A.TICKET_ID AS TICKET_ID, B.PRODUCT_ID AS PRODUCT_ID, B.PRODUCT_DESC AS PRODUCT_DESC, A.PROMOTION_FLAG AS PROMOTION_FLAG, SUM(A.QUANTITY) AS SUM_UNITS, SUM(A.SALES) AS SUM_SALES", "./TestData/openschemas_human/stackoverflow_012.json"]
["MATCH (P:N$PERSON { NAME:'HOMER FLINSTONE' }) RETURN P.ID, P.NAME", "./TestData/openschemas_human/tutorial_013.json"]
["MATCH (MOVIE:N$MOVIE) WHERE MOVIE.RATING > 7 RETURN MOVIE.TITLE", "./TestData/openschemas_human/tutorial_014.json"]
["MATCH (ACTOR:N$ACTOR)-[:E$ACTED_IN]->(MOVIE:N$MOVIE {TITLE: 'THE MATRIX'}) RETURN ACTOR.NAME", "./TestData/openschemas_human/tutorial_015.json"]
["MATCH (N:N$PERSON) WITH N.ZIPCODE AS ZIP, COUNT(*) AS POPULATION WHERE POPULATION > 3 RETURN ZIP, POPULATION", "./TestData/openschemas_human/tutorial_016.json"]
["MATCH (P:N$PERSON)<-[:E$EMPLOYEE]-(D:N$DEPARTMENT) WHERE D.NAME =  'IT DEPARTMENT' RETURN P.NAME", "./TestData/openschemas_human/tutorial_017.json"]
["MATCH (U:N$CUSTOMER {CUSTOMER_ID:1})-[:E$BOUGHT]->(P:N$PRODUCT)<-[:E$BOUGHT]-(PEER:N$CUSTOMER)-[:E$BOUGHT]->(RECO:N$PRODUCT) WHERE NOT (U)-[:E$BOUGHT]->(RECO) RETURN RECO.PRODUCT_NAME AS RECOMMENDATION, COUNT(*) AS FREQUENCY", "./TestData/openschemas_human/tutorial_018.json"]
["MATCH (N: N$PERSON)-[:E$HAS_PARENT]->(P: N$PERSON)-[:E$LIVES_IN]->(C: N$CITY) RETURN P.NAME AS NAME, C.NAME AS PARENTSCITY", "./TestData/openschemas_human/tutorial_019.json"]
["MATCH (P:N$PERSON {NAME: 'TOM HANKS'}) RETURN P.PERSON_ID, P.NAME, P.B_YEAR", "./TestData/openschemas_human/tutorial_020.json"]
["MATCH (:N$PERSON {NAME: 'TOM HANKS'})-->(M:N$MOVIE) RETURN M.TITLE", "./TestData/openschemas_human/tutorial_021.json"]
["MATCH (:N$PERSON {NAME: 'TOM HANKS'})-[:E$DIRECTED]->(M:N$MOVIE) RETURN M.TITLE", "./TestData/openschemas_human/tutorial_022.json"]
["MATCH (:N$PERSON {NAME: 'TOM HANKS'})-->(:N$MOVIE)<-[:E$ACTED_IN]-(COACTOR:N$PERSON) RETURN COACTOR.NAME", "./TestData/openschemas_human/tutorial_023.json"]
["MATCH (P:N$PRODUCT) RETURN P.PRODUCTID, P.PRODUCTNAME", "./TestData/openschemas_human/tutorial_024.json"]
["MATCH (P:N$PRODUCT) RETURN P.PRODUCTNAME, P.UNITPRICE ORDER BY P.UNITPRICE DESC LIMIT 3", "./TestData/openschemas_human/tutorial_025.json"]
["MATCH (P:N$PRODUCT) WHERE P.PRODUCTNAME = 'CHOCOLADE' RETURN P.PRODUCTNAME, P.UNITPRICE", "./TestData/openschemas_human/tutorial_026.json"]
["MATCH (P:N$PRODUCT {PRODUCTNAME:'CHOCOLADE'}) RETURN P.PRODUCTNAME, P.UNITPRICE", "./TestData/openschemas_human/tutorial_027.json"]
["MATCH (P:N$PRODUCT) WHERE P.PRODUCTNAME IN ['CHOCOLADE','CHAI'] RETURN P.PRODUCTNAME, P.UNITPRICE", "./TestData/openschemas_human/tutorial_028.json"]
["MATCH (P:N$PRODUCT {PRODUCTNAME:'CHOCOLADE'})<-[:E$ORDERS]-(:N$ORDER)<-[:E$PURCHASED]-(C:N$CUSTOMER) RETURN DISTINCT C.COMPANYNAME", "./TestData/openschemas_human/tutorial_029.json"]
["MATCH (C:N$CUSTOMER {COMPANYNAME:'DRACHENBLUT DELIKATESSEN'}) OPTIONAL MATCH (P:N$PRODUCT)<-[PU:E$ORDERS]-(:N$ORDER)<-[:E$PURCHASED]-(C) RETURN P.PRODUCTNAME, SUM(PU.UNITPRICE * PU.QUANTITY) AS VOLUME", "./TestData/openschemas_human/tutorial_030.json"]
["MATCH (:N$ORDER)<-[:E$SOLD]-(E:N$EMPLOYEE) RETURN E.EMPLOYEEID, COUNT(*) AS CNT", "./TestData/openschemas_human/tutorial_031.json"]
["MATCH (T:N$TERRITORY)<-[:E$IN_TERRITORY]-(E:N$EMPLOYEE) RETURN E.LASTNAME, T.TERRITORYDESCRIPTION", "./TestData/openschemas_human/tutorial_032.json"]
["MATCH (MOVIE:N$MOVIE) RETURN MOVIE.TITLE", "./TestData/openschemas_human/tutorial_033.json"]
["MATCH (MOVIE:N$MOVIE) WHERE MOVIE.RELEASED > 1998 RETURN MOVIE.TITLE", "./TestData/openschemas_human/tutorial_034.json"]
["MATCH (PERSON:N$PERSON)-[:E$ACTED_IN]->(MOVIE:N$MOVIE) RETURN PERSON.NAME, MOVIE.TITLE", "./TestData/openschemas_human/tutorial_035.json"]
["MATCH (KEANU:N$PERSON)-[:E$ACTED_IN]->(MOVIE:N$MOVIE), (COACTOR:N$PERSON)-[:E$ACTED_IN]->(MOVIE) WHERE KEANU.NAME = 'KEANU REEVES' RETURN DISTINCT COACTOR.NAME", "./TestData/openschemas_human/tutorial_036.json"]
["MATCH (PERSON:N$PERSON) WHERE (PERSON)-[:E$ACTED_IN]->() AND (PERSON)-[:E$PRODUCED]->() RETURN PERSON.NAME", "./TestData/openschemas_human/tutorial_037.json"]
["MATCH (KEANU:N$PERSON {NAME: 'KEANU REEVES'})-[:E$ACTED_IN]->(MOVIE:N$MOVIE), (DIRECTOR:N$PERSON)-[:E$DIRECTED]->(MOVIE) RETURN DIRECTOR.NAME, COUNT(*) DESC", "./TestData/openschemas_human/tutorial_038.json"]
["MATCH (N1:N$DOC {ID: 0})-[R1:E$HAS]->(N2:N$TERM)-[R2:E$IN]->(N3:N$DOC) RETURN N3.ID, COUNT(*)", "./TestData/openschemas_human/academic_039.json"]
["MATCH (N1: N$DOC {ID: 0})-[R1: E$HAS]->(N2)-[R2: E$IN]->(N3) RETURN N3.ID, SUM(R1.FRE * R2.FRE)", "./TestData/openschemas_human/academic_040.json"]
["MATCH (T1 {ID: 1})-[R1:E$IN]->(D) WITH D MATCH (T2 {ID: 2})-[R2:E$IN]->(D) WITH D MATCH (T3 {ID: 3})-[R3:E$IN]->(D) WITH D MATCH (D)-[R:E$INCLUDE]->(A) WITH A.ID, COUNT(A) AS COUNT RETURN A.ID, COUNT", "./TestData/openschemas_human/academic_041.json"]
["MATCH (T1 {ID: 1})-[R1:E$IN]->(D) WITH D MATCH (T2 {ID: 2})-[R2:E$IN]->(D) WITH D MATCH (T3 {ID: 3})-[R3:E$IN]->(D) WITH D MATCH (D)-[R:E$INCLUDE]->(T) WITH T.ID, SUM(R.FRE) AS AGG RETURN T.ID, AGG", "./TestData/openschemas_human/academic_042.json"]
["MATCH (A1 {ID: 1})-[R1:E$PUBLISH]->(D)-[R2:E$HAS]->(T)-[R3:E$IN]->(D2)-[R4:E$INCLUDE]->(A2) RETURN A2.ID, SUM(R2.FRE * R3.FRE)", "./TestData/openschemas_human/academic_043.json"]
["MATCH (C1:N$CONCEPT {CID: 1})-[R1:E$CS]->(P1:N$PA)-[R2:E$SP]->(S:N$SENTENCE) WITH S MATCH (S)<-[R3:E$SP]-(P2:N$PA)<-[R4:E$CS]-(C2:N$CONCEPT) RETURN C2.CID, COUNT(*)", "./TestData/openschemas_human/academic_044.json"]
["MATCH (A: N$ADMISSIONS)-[:E$ADMISSIONS_DOCTORS]->(B: N$DOCTORS), (A: N$ADMISSIONS)-[:E$ADMISSIONS_PATIENTS]->(C: N$PATIENTS) WHERE B.SPECIALITY = 'INTERNAL MEDCINE' AND C.NAME = 'TOSAHWI AYELEN' RETURN A.ADMI_DATE", "./TestData/openschemas_human/academic_045.json"]




















["MATCH (ITM:N$ITM) MATCH (ITP:N$ITP)<-[:E$RELATED_TO]-(PUR:N$PUR) WHERE PUR.ODATE > 85 AND ITM.ITEMN = ITP.ITEMN AND ITM.ITEMN > 1 AND ITM.ITEMN < 20 RETURN DISTINCT ITM.ITEMN, PUR.VENDN", "./TestData/openschemas_human/literature_066.json"]
["MATCH (ITP:N$ITP) WHERE ITP.NP > 1000 WITH DISTINCT ITP.ITEMNO, ITP.NP MATCH (ITM:N$ITM) WHERE ITP.ITEMNO = ITM.ITEMNO RETURN ITP.NP, ITM.TYPE, ITM.ITEMNO", "./TestData/openschemas_human/literature_067.json"]
["MATCH (ITP:N$ITP) WHERE EXISTS { MATCH (ITL:N$ITL) WHERE ITL.ITEMN = ITP.ITEMN AND ITL.WKCEN = 468 AND ITL.LOCAN = 0 } RETURN ITP.ITEMN, ITP.PONUM", "./TestData/openschemas_human/literature_068.json"]
["MATCH (X:N$EMP)-[:E$WORK_AT]->(Y:N$DEPT) WHERE Y.LOC = 3 AND X.EMP = Y.MGR RETURN X.NAME AS XN", "./TestData/openschemas_human/literature_069.json"]
["MATCH (X:N$USER), (Y:N$PICTURE) WHERE X.CITY = 3 AND X.UID = Y.UID AND Y.SIZE > 1000000 WITH X, COUNT(*) AS CNT RETURN X.UID AS UID, X.UNAME, CNT", "./TestData/openschemas_human/literature_070.json"]
["MATCH (X:N$USR), (U:N$PIC), (V:N$PIC), (W:N$PIC) WHERE X.USRUID = U.PICUID AND X.USRUID = V.PICUID AND X.USRUID = W.PICUID AND W.PICSIZE = V.PICSIZE AND U IS NOT NULL AND V IS NULL RETURN DISTINCT X.USRUID AS XID, X.USRNAME AS XNAME", "./TestData/openschemas_human/literature_071.json"]
["MATCH (X:N$EMP)-[:E$WORK_AT]->(Y:N$DEPT) WHERE Y.LOC = 3 AND X.EMP = Y.MGR RETURN X.NAME AS XN", "./TestData/openschemas_human/literature_072.json"]
["MATCH (I:N$INSTRUCTOR)-[T:E$TEACHES]->(C:N$COURSE)-[:E$BELONGS_TO]->(D:N$DEPARTMENT) WITH D.DEPT_NAME, AVG(I.SALARY) AS AVG_SALARY, COUNT(DISTINCT I.SALARY) AS NUM_SALARY WHERE AVG_SALARY>50000 AND NUM_SALARY=4 RETURN D.DEPT_NAME, AVG_SALARY", "./TestData/openschemas_human/literature_073.json"]
["MATCH (COURSE:N$COURSE)-[:E$BELONGS_TO]->(DEPT:N$DEPARTMENT)<-[:E$STUDY_AT]-(STUDENT:N$STUDENT)-[TAKES:E$TAKES]->(SECTION:N$SECTION) WHERE COURSE.COURSE_ID = TAKES.COURSE_ID AND TAKES.YEAR = SECTION.YEAR AND DEPT.BUILDING = SECTION.BUILDING WITH STUDENT.ID, DEPT.DEPT_NAME, COUNT(DEPT.DEPT_NAME) AS NUM_DEPT WHERE NUM_DEPT > 1 RETURN STUDENT.ID", "./TestData/openschemas_human/literature_074.json"]
["MATCH (:N$STUDENT)-[TAKES:E$TAKES]->(S:N$SECTION)  WITH TAKES.ID, S.TIME_SLOT_ID, S.YEAR, COUNT(S.TIME_SLOT_ID) AS TIME_SLOT_IDS WHERE TIME_SLOT_IDS > 1 MATCH (STUDENT:N$STUDENT) WHERE STUDENT.ID = TAKES.ID WITH STUDENT.ID, STUDENT.NAME, COUNT(DISTINCT STUDENT.ID) AS DISTINCT_STUDENT_IDS WHERE DISTINCT_STUDENT_IDS > 2 RETURN STUDENT.ID, STUDENT.NAME", "./TestData/openschemas_human/literature_075.json"]
["MATCH (:N$INSTRUCTOR)-[TEACHES:E$TEACHES]->(:N$COURSE) WITH TEACHES.YEAR AS T, TEACHES.COURSE_ID, COUNT(TEACHES.ID) AS NUM_ID WHERE NUM_ID > 4 WITH T, SUM(T) AS SU RETURN SU", "./TestData/openschemas_human/literature_076.json"]
["MATCH (:N$STUDENT)-[TAKES:E$TAKES]->(SECTION:N$SECTION) WHERE TAKES.YEAR = SECTION.YEAR WITH TAKES.ID, SECTION.TIME_SLOT_ID, TAKES.YEAR, COUNT(SECTION.TIME_SLOT_ID) AS TIME_SLOT_IDS WHERE TIME_SLOT_IDS > 4 MATCH (STUDENT:N$STUDENT) WHERE STUDENT.ID = TAKES.ID RETURN STUDENT.ID, STUDENT.NAME", "./TestData/openschemas_human/literature_077.json"]
["MATCH (A:N$FLIGHTS) WITH A.ORIGIN_CITY, MAX(A.ACTUAL_TIME) AS MAX_TIME MATCH (F:N$FLIGHTS) WHERE F.ORIGIN_CITY = A.ORIGIN_CITY AND F.ACTUAL_TIME = MAX_TIME RETURN DISTINCT F.ORIGIN_CITY, F.DEST_CITY, F.ACTUAL_TIME", "./TestData/openschemas_human/literature_078.json"]
["MATCH (C:N$COURSE)-[:E$BELONGS_TO]->(D:N$DEPARTMENT)<-[:E$WORK_AT]-(I:N$INSTRUCTOR) WITH D.DEPT_NAME, SUM(I.SALARY) AS SUM_SALARY, MAX(I.SALARY) AS MAX_SALARY WHERE SUM_SALARY>100 AND MAX_SALARY<75 RETURN D.DEPT_NAME, SUM_SALARY", "./TestData/openschemas_human/literature_079.json"]
["MATCH (:N$INSTRUCTOR)-[T:E$TEACHES]->(C:N$COURSE)-[:E$BELONGS_TO]->(D:N$DEPARTMENT) WITH D.DEPT_NAME, SUM(D.BUDGET) AS SUM_BUDGET, COUNT(D.BUDGET) AS NUM_BUDGET WHERE SUM_BUDGET>100000 AND NUM_BUDGET>10 RETURN D.DEPT_NAME, SUM_BUDGET", "./TestData/openschemas_human/literature_080.json"]
["MATCH (I:N$INSTRUCTOR)-[T:E$TEACHES]->(C:N$COURSE)-[:E$BELONGS_TO]->(D:N$DEPARTMENT) WITH D.DEPT_NAME, AVG(I.SALARY) AS AVG_SALARY, COUNT(DISTINCT I.SALARY) AS NUM_SALARY WHERE AVG_SALARY>50000 AND NUM_SALARY=4 RETURN D.DEPT_NAME, AVG_SALARY", "./TestData/openschemas_human/literature_081.json"]
["MATCH (C:N$COURSE)-[:E$BELONGS_TO]->(D:N$DEPARTMENT), (:N$INSTRUCTOR)-[T:E$TEACHES]->(:N$COURSE) WHERE D.BUDGET = T.YEAR + 4 WITH T.SEMESTER, SUM(C.CREDITS) AS SUM_CREDITS, AVG(C.CREDITS) AS AVG_CREDITS, COUNT(D.BUILDING) AS NUM_BUILDING WHERE AVG_CREDITS>2 AND NUM_BUILDING=2 RETURN T.SEMESTER, SUM_CREDITS", "./TestData/openschemas_human/literature_082.json"]
["MATCH (D:N$DEPARTMENT)<-[:E$STUDY_AT]-(STUDENT:N$STUDENT)-[TAKES:E$TAKES]->(SECTION:N$SECTION) WHERE TAKES.YEAR = SECTION.YEAR WITH STUDENT.ID, D.DEPT_NAME, COUNT(D.DEPT_NAME) AS NUM_DEPT WHERE NUM_DEPT > 1 RETURN STUDENT.ID", "./TestData/openschemas_human/literature_083.json"]
["MATCH (:N$STUDENT)-[TAKES:E$TAKES]->(S:N$SECTION) WITH TAKES.ID, S.TIME_SLOT_ID, S.YEAR, COUNT(S.TIME_SLOT_ID) AS NUM_TIME_SLOT_ID WHERE NUM_TIME_SLOT_ID > 1 MATCH (STUDENT:N$STUDENT) WHERE STUDENT.ID = TAKES.ID WITH STUDENT.ID, STUDENT.NAME, COUNT(DISTINCT STUDENT.ID) AS NUM_IDS WHERE NUM_IDS > 2 RETURN STUDENT.ID, STUDENT.NAME", "./TestData/openschemas_human/literature_084.json"]
["MATCH (:N$STUDENT)-[TAKES:E$TAKES]->(SECTION:N$SECTION) WHERE TAKES.YEAR = SECTION.YEAR WITH TAKES.ID, SECTION.TIME_SLOT_ID, TAKES.YEAR, COUNT(DISTINCT SECTION.TIME_SLOT_ID) AS DISTINCT_TIME_SLOT_IDS WHERE DISTINCT_TIME_SLOT_IDS > 4 MATCH (STUDENT:N$STUDENT) WHERE STUDENT.ID = TAKES.ID RETURN DISTINCT STUDENT.ID, STUDENT.NAME", "./TestData/openschemas_human/literature_085.json"]
["MATCH (n1:N$PERSON) OPTIONAL MATCH (n1:N$PERSON)-[e1:E$LIVE_IN]->(n2:N$ADDRESS) RETURN n1.FIRSTNAME, n1.LASTNAME, n2.CITY, n2.STATE", "./TestData/openschemas_human/leetcode_086.json"]
["MATCH (n1:N$CUSTOMERS) WHERE NOT (n1)-[:E$HAS_ORDER]->(:N$ORDERS) RETURN n1.NAME AS CUSTOMERS", "./TestData/openschemas_human/leetcode_087.json"]
["MATCH (n1:N$EMPLOYEE) OPTIONAL MATCH (n1)-[:E$HAS]->(n2:N$BONUS) WITH n1, n2 WHERE n2.BONUS < 1000 OR n2.BONUS IS NULL RETURN n1.NAME, n2.BONUS", "./TestData/openschemas_human/leetcode_088.json"]
["MATCH (:N$SALESPERSON)<-[O:E$ORDERS]-(:N$COMPANY) OPTIONAL MATCH (:N$SALESPERSON)<-[O]-(C:N$COMPANY) WITH C, O WHERE C.NAME = 'RED' WITH COLLECT(O.SALES_ID) AS SALES_RED MATCH (n1:N$SALESPERSON) WHERE NOT (n1.SALES_ID IN SALES_RED) RETURN DISTINCT n1.NAME AS NAME", "./TestData/openschemas_human/leetcode_089.json"]
["MATCH (NOPRODUCTS:N$PRODUCT) WITH COUNT(*) AS NOP MATCH (PRODUCT:N$PRODUCT)<-[:E$BOUGHT]-(BASIC:N$CUSTOMER) WITH NOP, BASIC.CUSTOMER_ID AS CUSTOMER_ID, COUNT(DISTINCT PRODUCT.PRODUCT_KEY) AS NOPRODUCTSBOUGHT WITH NOP, CUSTOMER_ID, NOPRODUCTSBOUGHT WHERE NOPRODUCTSBOUGHT = NOP RETURN CUSTOMER_ID", "./TestData/openschemas_human/leetcode_090.json"]
["MATCH (n1:N$ACTORDIRECTOR) WITH n1.ACTOR_ID, n1.DIRECTOR_ID, COUNT(*) as num WHERE num >= 3 RETURN n1.ACTOR_ID, n1.DIRECTOR_ID", "./TestData/openschemas_human/leetcode_091.json"]
["MATCH (B:N$EMPLOYEE)-[:E$WORK]->(A:N$PROJECT) RETURN A.PROJECT_ID, AVG(B.EXPERIENCE_YEARS) AS AVERAGE_YEARS", "./TestData/openschemas_human/leetcode_092.json"]
["MATCH (:N$PRODUCT {PRODUCT_NAME: 'S8'})-[:E$SELL]->(S:N$SALES) WHERE NOT (:N$PRODUCT {PRODUCT_NAME: 'IPHONE'})-[:E$SELL]->(S:N$SALES) RETURN DISTINCT S.BUYER_ID AS BUYER_ID", "./TestData/openschemas_human/leetcode_093.json"]
["MATCH (P:N$PRODUCT)-[:E$SELL]->(S:N$SALES) WITH P, MIN(S.SALE_DATE) AS MIN_DATE, MAX(S.SALE_DATE) AS MAX_DATE WHERE MIN_DATE >= '2019-01-01' AND MAX_DATE <= '2019-03-31' RETURN P.PRODUCT_ID, P.PRODUCT_NAME", "./TestData/openschemas_human/leetcode_094.json"]
["MATCH (A:N$ACTIONS) WHERE A.EXTRA='SPAM' AND A.ACTION='REPORT' WITH A OPTIONAL MATCH (A)-[E:E$RELATED_TO]->(B:N$REMOVALS) WITH A.ACTION_DATE AS ACTION_DATE, COUNT(DISTINCT B.POST_ID)/COUNT(DISTINCT E.POST_ID) AS FRAC RETURN 100*AVG(FRAC) AS AVERAGE_DAILY_PERCENT", "./TestData/openschemas_human/leetcode_095.json"]
["MATCH (B:N$UNITSSOLD)-[:E$RELATED_TO]->(A:N$PRICES) WHERE A.START_DATE <= B.PURCHASE_DATE AND B.PURCHASE_DATE <= A.END_DATE RETURN B.PRODUCT_ID, SUM((B.UNITS * A.PRICE)) / SUM(B.UNITS) AS AVERAGE_PRICE", "./TestData/openschemas_human/leetcode_096.json"]
["MATCH (U1:N$USER)-[F:E$FRIENDSHIP]->(U2:N$USER) MATCH (U3:N$USER)-[L:E$LIKES]->(P1:N$PAGE) WHERE (U1.ID = 1 AND U3.ID = U2.ID) OR (U2.ID =1 AND U3.ID = U1.ID) AND NOT (:N$USER {ID: 1})-[:E$LIKES]->(P1) RETURN DISTINCT L.PAGE_ID AS RECOMMENDED_PAGE", "./TestData/openschemas_human/leetcode_097.json"]
["MATCH (STUDENTS:N$STUDENTS) WHERE NOT (STUDENTS)-[:E$BELONG_TO]->(:N$DEPARTMENTS) RETURN STUDENTS.ID, STUDENTS.NAME", "./TestData/openschemas_human/leetcode_098.json"]
["MATCH (E1:N$EMPLOYEES) OPTIONAL MATCH (E1)<-[:E$IS]-(E2:N$EMPLOYEEUNI) RETURN E2.UNIQUE_ID, E1.NAME", "./TestData/openschemas_human/leetcode_099.json"]
["MATCH (CUSTOMERS:N$CUSTOMERS) WHERE (CUSTOMERS)-[:E$HAS]->(:N$ORDERS {PRODUCT_NAME: 'A'}) AND (CUSTOMERS)-[:E$HAS]->(:N$ORDERS {PRODUCT_NAME: 'B'}) AND NOT (CUSTOMERS)-[:E$HAS]->(:N$ORDERS {PRODUCT_NAME: 'C'}) RETURN CUSTOMERS.CUSTOMER_ID, CUSTOMERS.CUSTOMER_NAME ORDER BY CUSTOMERS.CUSTOMER_ID", "./TestData/openschemas_human/leetcode_100.json"]
["MATCH (VISITS:N$VISITS) WHERE NOT (VISITS)-[:E$HAS]->(:N$TRANSACTIONS) RETURN VISITS.CUSTOMER_ID, COUNT(*) AS COUNT_NO_TRANS", "./TestData/openschemas_human/leetcode_101.json"]
["MATCH (U:N$USERS)-[:E$HAS]->(T:N$TRANSACTIONS) WITH U, SUM(T.AMOUNT) AS BALANCE WHERE BALANCE > 3 RETURN U.NAME, BALANCE", "./TestData/openschemas_human/leetcode_102.json"]
["MATCH (P:N$PRODUCT) OPTIONAL MATCH (P)-[:E$BELONG_TO]->(I:N$INVOICE) RETURN P.NAME AS NAME, SUM(I.REST) AS REST, SUM(I.PAID) AS PAID, SUM(I.CANCELED) AS CANCELED, SUM(I.REFUNDED) AS REFUNDED ORDER BY NAME", "./TestData/openschemas_human/leetcode_103.json"]
["MATCH (n:N$DAILYSALES) RETURN n.DATE_ID AS DATE_ID, n.MAKE_NAME AS MAKE_NAME, COUNT(DISTINCT n.LEAD_ID) AS UNIQUE_LEADS, COUNT(DISTINCT n.PARTNER_ID) AS UNIQUE_PARTNERS", "./TestData/openschemas_human/leetcode_104.json"]
["MATCH (B:N$BOXES) OPTIONAL MATCH (B)<-[:E$RELATED_TO]-(C:N$CHESTS) RETURN SUM(B.APPLE_COUNT + C.APPLE_COUNT) AS APPLE_COUNT , SUM(B.ORANGE_COUNT + C.ORANGE_COUNT) AS ORANGE_COUNT", "./TestData/openschemas_human/leetcode_105.json"]
["MATCH (n:N$MEMBER {MNAME: '1'}) RETURN n.ADDRESS AS ADDRESS, n.CITY AS CITY, n.STATE AS STATE, n.ZIPCODE AS ZIPCODE", "./TestData/openschemas_human/data_106.json"]
["MATCH (:N$MEMBER {MNAME: '1'})-[:E$MEMBER_ADDRESS]->(n:N$ADDRESS) RETURN n.ADDRESS AS ADDRESS, n.CITY AS CITY, n.STATE AS STATE, n.ZIPCODE AS ZIPCODE", "./TestData/openschemas_human/data_107.json"]
["MATCH (:N$EMPLOYEE {EID: 1})-[:E$EMPLOYEE_EMAIL]->(n:N$EMAIL) RETURN n.WORK_EMAIL AS WORK_EMAIL, n.PERSONAL_EMAIL AS PERSONAL_EMAIL", "./TestData/openschemas_human/data_108.json"]
["MATCH (n:N$EMPLOYEE {EID: 1}) RETURN n.WORK_EMAIL AS WORK_EMAIL, n.PERSONAL_EMAIL AS PERSONAL_EMAIL", "./TestData/openschemas_human/data_109.json"]
["MATCH (:N$PROJECT {PNAME: '1'})-[:E$PROJ_EMP]->(n:N$EMPLOYEE) RETURN n.ENAME AS ENAME", "./TestData/openschemas_human/data_110.json"]
["MATCH (:N$PROJECT {PNAME: '1'})-[:E$PROJ_EMP]->(n:N$EMPLOYEE) RETURN n.ENAME AS ENAME", "./TestData/openschemas_human/data_111.json"]
["MATCH (n:N$EMPLOYEE {EMPLOYEENUMBER: 1}) RETURN n.PHONENUMBER AS PHONENUMBER", "./TestData/openschemas_human/data_112.json"]
["MATCH (n:N$EMPLOYEE {EMPLOYEENUMBER: 1}) RETURN n.PHONENUMBER AS PHONENUMBER", "./TestData/openschemas_human/data_113.json"]
["MATCH (:N$EMPLOYEE {EMPLOYEENUMBER: 1})-[:E$EMPLOYEE_EMPLOYEEIDENTIFICATION]->(n:N$EMPLOYEEIDENTIFICATION) RETURN n.VOICEPRINT AS VOICEPRINT", "./TestData/openschemas_human/data_114.json"]
["MATCH (n:N$EMPLOYEE {EMPLOYEENUMBER: 1}) RETURN n.VOICEPRINT AS VOICEPRINT", "./TestData/openschemas_human/data_115.json"]
["MATCH (n:N$EMPLOYEE {EMPLOYEENUMBER: 1}) RETURN n.NAME AS NAME", "./TestData/openschemas_human/data_116.json"]
["MATCH (n:N$EMPLOYEE {EMPLOYEENUMBER: 1}) RETURN n.NAME AS NAME", "./TestData/openschemas_human/data_117.json"]
["MATCH (n:N$EMPLOYEE {EMPLOYEENUMBER: 1}) RETURN n.VOICEPRINT AS VOICEPRINT", "./TestData/openschemas_human/data_118.json"]
["MATCH (:N$EMPLOYEE {EMPLOYEENUMBER: 1})-[:E$EMPLOYEE_EMPLOYEEIDENTIFICATION]->(n:N$EMPLOYEEIDENTIFICATION) RETURN n.VOICEPRINT AS VOICEPRINT", "./TestData/openschemas_human/data_119.json"]
["MATCH (n:N$CUSTOMER {FIRSTNAME: '1'}) RETURN n.CUSTOMERID AS CUSTOMERID", "./TestData/openschemas_human/data_120.json"]
["MATCH (n:N$CUSTOMER {FIRSTNAME: 1}) RETURN n.CUSTOMERID AS CUSTOMERID", "./TestData/openschemas_human/data_121.json"]
["MATCH (n:N$ACCOUNT {CUSTOMERID_FK: 1}) RETURN n.ACCOUNTID AS ACCOUNTID", "./TestData/openschemas_human/data_122.json"]
["MATCH (n:N$ACCOUNT {CUSTOMERID_FK: 1}) RETURN n.ACCOUNTID AS ACCOUNTID", "./TestData/openschemas_human/data_123.json"]
["MATCH (n:N$ACCOUNT {CUSTOMERID_FK: 1}) RETURN n.BALANCE AS BALANCE", "./TestData/openschemas_human/data_124.json"]
["MATCH (n:N$CUSTOMER {CUSTOMERID: 1}) RETURN n.BALANCE AS BALANCE", "./TestData/openschemas_human/data_125.json"]
["MATCH (n:N$CUSTOMER {FIRSTNAME: 1}) RETURN n.CUSTOMERID AS CUSTOMERID", "./TestData/openschemas_human/data_126.json"]
["MATCH (n:N$CUSTOMER {FNAME: 1}) RETURN n.CUSTOMERID AS CUSTOMERID", "./TestData/openschemas_human/data_127.json"]
["MATCH (n:N$CUSTOMER {CUSTOMERID: 1}) RETURN n.FIRSTNAME AS FIRSTNAME", "./TestData/openschemas_human/data_128.json"]
["MATCH (n:N$CUSTOMER {CUSTOMERID: 1}) RETURN n.FNAME AS FNAME", "./TestData/openschemas_human/data_129.json"]
["MATCH (n:N$CUSTOMER {NAME: 1}) RETURN n.CUSTOMERPOID AS CUSTOMERPOID", "./TestData/openschemas_human/data_130.json"]
["MATCH (n:N$CUSTOMER {NAME: 1}) RETURN n.CUSTOMERPOID AS CUSTOMERPOID", "./TestData/openschemas_human/data_131.json"]
["MATCH (:N$CUSTOMER {NAME: 1})-[:E$HOLDS]->(n:N$POLICY) RETURN n.POLICYID AS POLICYID, n.AMOUNT AS AMOUNT", "./TestData/openschemas_human/data_132.json"]
["MATCH (:N$CUSTOMER {NAME: 1})-[:E$HOLDS]->(n:N$POLICY) RETURN n.POLICYID AS POLICYID, n.AMOUNT AS AMOUNT", "./TestData/openschemas_human/data_133.json"]
["MATCH (n1:N$ADDRESS {AID: 1})-[:E$ADDRESS_STATE]->(n2:N$STATE) RETURN n1.STREET AS STREET, n1.CITY AS CITY, n2.NAME AS NAME, n1.COUNTRYCODE AS COUNTRYCODE", "./TestData/openschemas_human/data_134.json"]
["MATCH (n1:N$ADDRESS {AID: 1})-[:E$ADDRESS_STATE]->(n2:N$STATE) RETURN n1.STREET AS STREET, n1.CITY AS CITY, n2.NAME AS NAME, n1.COUNTRYCODE AS COUNTRYCODE", "./TestData/openschemas_human/data_135.json"]
["MATCH (n:N$STATE {STATECODE: 1}) RETURN n.NAME AS NAME", "./TestData/openschemas_human/data_136.json"]
["MATCH (n:N$STATE {STATECODE: 1}) RETURN n.NAME AS NAME", "./TestData/openschemas_human/data_137.json"]
["MATCH (n:N$STATE {STATECODE: 1}) RETURN n.NAME AS NAME", "./TestData/openschemas_human/data_138.json"]
["MATCH (n:N$STATE {STATECODE: 1}) RETURN n.NAME AS NAME", "./TestData/openschemas_human/data_139.json"]
["MATCH (n1:N$ADDRESS {ADDRESSID: 1})-[:E$ADDRESS_STATE]->(n2:N$STATE) RETURN n1.STREET AS STREET, n1.CITY AS CITY, n2.NAME AS NAME, n1.ZIPCODE AS ZIPCODE", "./TestData/openschemas_human/data_140.json"]
["MATCH (n1:N$ADDRESS {ADDRESSID: 1})-[:E$ADDRESS_STATE]->(n2:N$STATE) RETURN n1.STREET AS STREET, n1.CITY AS CITY, n2.NAME AS NAME, n1.ZIPCODE AS ZIPCODE", "./TestData/openschemas_human/data_141.json"]
["MATCH (:N$INVOICES {INVOICEID: 1})-[:E$INVOICES_CUSTOMERS]->(n:N$CUSTOMERS) RETURN n.CITYID AS CITYID", "./TestData/openschemas_human/data_142.json"]
["MATCH (:N$INVOICES {INVOICEID: 1})-[:E$INVOICES_CUSTOMERS]->(n:N$CUSTOMERS) RETURN n.CITYID AS CITYID", "./TestData/openschemas_human/data_143.json"]
["MATCH (n:N$INVOICES {INVOICEID: 1}) RETURN n.INVOICEDATE AS INVOICEDATE", "./TestData/openschemas_human/data_144.json"]
["MATCH (n:N$INVOICES {INVOICEID: 1}) RETURN n.INVOICEDATE AS INVOICEDATE", "./TestData/openschemas_human/data_145.json"]
["MATCH (n:N$IDENTITIES {IDENTITIES_ID: 1}) RETURN n.IDENTITIES_USER_ID AS IDENTITIES_USER_ID, n.IDENTITIES_PROVIDER AS IDENTITIES_PROVIDER, n.IDENTITIES_TOKEN AS IDENTITIES_TOKEN", "./TestData/openschemas_human/data_146.json"]

["MATCH (n:N$LABORATORIES {LABORATORIES_ID: 1}) RETURN n.LABORATORIES_UPDATED_AT AS LABORATORIES_UPDATED_AT", "./TestData/openschemas_human/data_148.json"]

["MATCH (n:N$POLICIES {POLICIES_ID: 1}) RETURN n.POLICIES_USER_ID AS POLICIES_USER_ID, n.POLICIES_GRANTER_ID AS POLICIES_GRANTER_ID, n.POLICIES_DEFINITION AS POLICIES_DEFINITION, n.POLICIES_DELEGABLE AS POLICIES_DELEGABLE, n.POLICIES_NAME AS POLICIES_NAME", "./TestData/openschemas_human/data_150.json"]

["MATCH (n:N$POLICIES)-[:E$POLICIES2USERS1]->(:N$USERS {USERS_ID: 1}) RETURN n.POLICIES_ID AS POLICIES_ID, n.POLICIES_USER_ID AS POLICIES_USER_ID, n.POLICIES_GRANTER_ID AS POLICIES_GRANTER_ID, n.POLICIES_DEFINITION AS POLICIES_DEFINITION, n.POLICIES_DELEGABLE AS POLICIES_DELEGABLE, n.POLICIES_NAME AS POLICIES_NAME", "./TestData/openschemas_human/data_152.json"]

["MATCH (n1:N$SUBSCRIBERS)-[:E$SUBSCRIBERS2USERS {TGT: 1}]->(n3:N$USERS)<-[:E$FILTERS2USERS]-(n2:N$FILTERS) RETURN n1.SUBSCRIBERS_ID AS SUBSCRIBERS_ID, n1.SUBSCRIBERS_USER_ID AS SUBSCRIBERS_USER_ID, n1.SUBSCRIBERS_NAME AS SUBSCRIBERS_NAME, n1.SUBSCRIBERS_URL AS SUBSCRIBERS_URL, n1.SUBSCRIBERS_FIELDS AS SUBSCRIBERS_FIELDS, n1.SUBSCRIBERS_LAST_RUN_AT AS SUBSCRIBERS_LAST_RUN_AT, n1.SUBSCRIBERS_URL_USER AS SUBSCRIBERS_URL_USER, n1.SUBSCRIBERS_URL_PASSWORD AS SUBSCRIBERS_URL_PASSWORD", "./TestData/openschemas_human/data_154.json"]

["MATCH (n1:N$COURSES {ID: 1})-[:E$COURSES_LOCATIONS]->(n2:N$LOCATIONS) RETURN n1.TITLE AS TITLE, n1.DESCRIPTION AS DESCRIPTION, n1.PRICE AS PRICE, n1.COACH_ID AS COACH_ID, n1.SPORT AS SPORT, n1.MAX_PARTICIPANTS AS MAX_PARTICIPANTS, n2.ADDRESS AS ADDRESS, n2.LATITUDE AS LATITUDE, n2.LONGITUDE AS LONGITUDE", "./TestData/openschemas_human/data_156.json"]
["MATCH (n:N$COURSES {ID: 1}) RETURN n.TITLE AS TITLE, n.DESCRIPTION AS DESCRIPTION, n.PRICE AS PRICE, n.COACH_ID AS COACH_ID, n.SPORT AS SPORT, n.MAX_PARTICIPANTS AS MAX_PARTICIPANTS, n.ADDRESS AS ADDRESS, n.LATITUDE AS LATITUDE, n.LONGITUDE AS LONGITUDE", "./TestData/openschemas_human/data_157.json"]
["MATCH (n2:N$LOCATIONS)<-[:E$COURSES_LOCATIONS]-(n1:N$COURSES)-[:E$COURSES_USERS]->(:N$USERS {ID: 1}) RETURN n1.TITLE AS TITLE, n1.DESCRIPTION AS DESCRIPTION, n1.PRICE AS PRICE, n1.SPORT AS SPORT, n1.MAX_PARTICIPANTS AS MAX_PARTICIPANTS, n2.ADDRESS AS ADDRESS, n2.LATITUDE AS LATITUDE, n2.LONGITUDE AS LONGITUDE", "./TestData/openschemas_human/data_158.json"]
["MATCH (n:N$COURSES)-[:E$COURSES_USERS]->(:N$USERS {ID: 1}) RETURN n.TITLE AS TITLE, n.DESCRIPTION AS DESCRIPTION, n.PRICE AS PRICE, n.SPORT AS SPORT, n.MAX_PARTICIPANTS AS MAX_PARTICIPANTS, n.ADDRESS AS ADDRESS, n.LATITUDE AS LATITUDE, n.LONGITUDE AS LONGITUDE", "./TestData/openschemas_human/data_159.json"]
["MATCH (n2:N$LOCATIONS)<-[:E$COURSES_LOCATIONS]-(n1:N$COURSES)-[:E$COURSES_USERS]->(:N$USERS {ID: 1}) RETURN n1.ID AS ID, n1.TITLE AS TITLE, n1.DESCRIPTION AS DESCRIPTION, n1.PRICE AS PRICE, n1.COACH_ID AS COACH_ID, n1.SPORT AS SPORT, n1.MAX_PARTICIPANTS AS MAX_PARTICIPANTS, n2.ADDRESS AS ADDRESS, n2.LATITUDE AS LATITUDE, n2.LONGITUDE AS LONGITUDE", "./TestData/openschemas_human/data_160.json"]
["MATCH (n:N$COURSES)-[:E$COURSES_USERS]->(:N$USERS {ID: 1}) RETURN n.ID AS ID, n.TITLE AS TITLE, n.DESCRIPTION AS DESCRIPTION, n.PRICE AS PRICE, n.COACH_ID AS COACH_ID, n.SPORT AS SPORT, n.MAX_PARTICIPANTS AS MAX_PARTICIPANTS, n.ADDRESS AS ADDRESS, n.LATITUDE AS LATITUDE, n.LONGITUDE AS LONGITUDE", "./TestData/openschemas_human/data_161.json"]
["MATCH (n:N$REGISTRATIONS {ID: 1}) RETURN n.USER_ID AS USER_ID, n.EMAIL AS EMAIL, n.FIRST_NAME AS FIRST_NAME, n.LAST_NAME AS LAST_NAME, n.ADDRESS AS ADDRESS, n.ADDRESS2 AS ADDRESS2, n.CITY AS CITY, n.STATE AS STATE, n.ZIP AS ZIP, n.PHONE_NUMBER AS PHONE_NUMBER, n.PROFESSION AS PROFESSION, n.EMPLOYER AS EMPLOYER, n.EDUCATION AS EDUCATION, n.ABOUT2030 AS ABOUT2030", "./TestData/openschemas_human/data_162.json"]
["MATCH (n:N$REGISTRATIONS {ID: 1}) RETURN n.USER_ID AS USER_ID, n.EMAIL AS EMAIL, n.FIRST_NAME AS FIRST_NAME, n.LAST_NAME AS LAST_NAME, n.ADDRESS AS ADDRESS, n.ADDRESS2 AS ADDRESS2, n.CITY AS CITY, n.STATE AS STATE, n.ZIP AS ZIP, n.PHONE_NUMBER AS PHONE_NUMBER, n.PROFESSION AS PROFESSION, n.EMPLOYER AS EMPLOYER, n.EDUCATION AS EDUCATION, n.ABOUT2030 AS ABOUT2030", "./TestData/openschemas_human/data_163.json"]
["MATCH (n:N$USER_ADDRESSES {ID: 1}) RETURN n.UPDATED_AT AS UPDATED_AT", "./TestData/openschemas_human/data_164.json"]
["MATCH (n:N$USER_ADDRESSES {ID: 1}) RETURN n.UPDATED_AT AS UPDATED_AT", "./TestData/openschemas_human/data_165.json"]
["MATCH (:N$EMAIL_ADDRESSES {ID: 1})-[:E$EMAIL_ADDRESSES2USERS]->(n:N$USERS) RETURN n.ID AS ID, n.FIRST_NAME AS FIRST_NAME, n.LAST_NAME AS LAST_NAME, n.URL_FRIENDLY AS URL_FRIENDLY, n.EMAIL AS EMAIL, n.CRYPTED_PASSWORD AS CRYPTED_PASSWORD, n.PASSWORD_SALT AS PASSWORD_SALT, n.PERSISTENCE_TOKEN AS PERSISTENCE_TOKEN, n.SINGLE_ACCESS_TOKEN AS SINGLE_ACCESS_TOKEN, n.PERISHABLE_TOKEN AS PERISHABLE_TOKEN, n.LOGIN_COUNT AS LOGIN_COUNT, n.FAILED_LOGIN_COUNT AS FAILED_LOGIN_COUNT, n.LAST_REQUEST_AT AS LAST_REQUEST_AT, n.CURRENT_LOGIN_AT AS CURRENT_LOGIN_AT, n.LAST_LOGIN_AT AS LAST_LOGIN_AT, n.CURRENT_LOGIN_IP AS CURRENT_LOGIN_IP, n.LAST_LOGIN_IP AS LAST_LOGIN_IP, n.JOINED_AT AS JOINED_AT, n.EXPIRED_AT AS EXPIRED_AT, n.ACTIVATED_AT AS ACTIVATED_AT, n.ACTIVE AS ACTIVE, n.ACTIVATED AS ACTIVATED", "./TestData/openschemas_human/data_166.json"]
["MATCH (:N$EMAIL_ADDRESSES {ID: 1})-[:E$EMAIL_ADDRESSES2USERS]->(n:N$USERS) RETURN n.ID AS ID, n.FIRST_NAME AS FIRST_NAME, n.LAST_NAME AS LAST_NAME, n.URL_FRIENDLY AS URL_FRIENDLY, n.EMAIL AS EMAIL, n.CRYPTED_PASSWORD AS CRYPTED_PASSWORD, n.PASSWORD_SALT AS PASSWORD_SALT, n.PERSISTENCE_TOKEN AS PERSISTENCE_TOKEN, n.SINGLE_ACCESS_TOKEN AS SINGLE_ACCESS_TOKEN, n.PERISHABLE_TOKEN AS PERISHABLE_TOKEN, n.LOGIN_COUNT AS LOGIN_COUNT, n.FAILED_LOGIN_COUNT AS FAILED_LOGIN_COUNT, n.LAST_REQUEST_AT AS LAST_REQUEST_AT, n.CURRENT_LOGIN_AT AS CURRENT_LOGIN_AT, n.LAST_LOGIN_AT AS LAST_LOGIN_AT, n.CURRENT_LOGIN_IP AS CURRENT_LOGIN_IP, n.LAST_LOGIN_IP AS LAST_LOGIN_IP, n.JOINED_AT AS JOINED_AT, n.EXPIRED_AT AS EXPIRED_AT, n.ACTIVATED_AT AS ACTIVATED_AT, n.ACTIVE AS ACTIVE, n.ACTIVATED AS ACTIVATED", "./TestData/openschemas_human/data_167.json"]
["MATCH (n:N$ADMIN_USERS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_168.json"]
["MATCH (n:N$ADMIN_USERS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_169.json"]
["MATCH (n:N$ADMIN_USERS {ID: 1}) RETURN n.UPDATED_AT AS UPDATED_AT", "./TestData/openschemas_human/data_170.json"]
["MATCH (n:N$ADMIN_USERS {ID: 1}) RETURN n.UPDATED_AT AS UPDATED_AT", "./TestData/openschemas_human/data_171.json"]
["MATCH (n:N$VIDEOS {ID: 1}) RETURN n.USER_ID AS USER_ID, n.TITLE AS TITLE, n.VENDOR AS VENDOR, n.UID AS UID, n.URL AS URL, n.PUBLIC AS PUBLIC, n.LOCATION AS LOCATION, n.MAKER AS MAKER, n.PLAYERS AS PLAYERS, n.FOR_FEEDBACK AS FOR_FEEDBACK, n.FEED_ID AS FEED_ID", "./TestData/openschemas_human/data_172.json"]
["MATCH (n:N$VIDEOS {ID: 1}) RETURN n.USER_ID AS USER_ID, n.TITLE AS TITLE, n.VENDOR AS VENDOR, n.UID AS UID, n.URL AS URL, n.PUBLIC AS PUBLIC, n.LOCATION AS LOCATION, n.MAKER AS MAKER, n.PLAYERS AS PLAYERS, n.FOR_FEEDBACK AS FOR_FEEDBACK, n.FEED_ID AS FEED_ID", "./TestData/openschemas_human/data_173.json"]
["MATCH (:N$TAGGINGS {ID: 1})-[:E$TAGGINGS2TAGS]->(n:N$TAGS) RETURN n.ID AS ID, n.NAME AS NAME", "./TestData/openschemas_human/data_174.json"]
["MATCH (n:N$VIDEOS {ID: 1}) RETURN n.USER_ID AS USER_ID, n.TITLE AS TITLE, n.VENDOR AS VENDOR, n.UID AS UID, n.URL AS URL, n.PUBLIC AS PUBLIC, n.LOCATION AS LOCATION, n.MAKER AS MAKER, n.PLAYERS AS PLAYERS, n.FOR_FEEDBACK AS FOR_FEEDBACK, n.FEED_ID AS FEED_ID", "./TestData/openschemas_human/data_175.json"]
["MATCH (n1:N$PROBLEM_LEVELS {ID: 1})-[:E$PROBLEM_LEVELS2MATH_PROBLEM_TEMPLATES]->(n2:N$MATH_PROBLEM_TEMPLATES) RETURN n2.LESSON_ID AS LESSON_ID, n2.INSTRUCTION_ID AS INSTRUCTION_ID, n1.DIFFICULTY AS DIFFICULTY, n2.DISPLAY_MODE AS DISPLAY_MODE", "./TestData/openschemas_human/data_176.json"]
["MATCH (n:N$MATH_PROBLEM_TEMPLATES {ID: 1}) RETURN n.LESSON_ID AS LESSON_ID, n.INSTRUCTION_ID AS INSTRUCTION_ID, n.DIFFICULTY AS DIFFICULTY, n.DISPLAY_MODE AS DISPLAY_MODE", "./TestData/openschemas_human/data_177.json"]
["MATCH (n:N$WORKSHEETS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_178.json"]
["MATCH (n:N$WORKSHEETS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_179.json"]
["MATCH (n:N$WORKSHEETS {ID: 1}) RETURN n.UPDATED_AT AS UPDATED_AT", "./TestData/openschemas_human/data_180.json"]
["MATCH (n:N$WORKSHEETS {ID: 1}) RETURN n.UPDATED_AT AS UPDATED_AT", "./TestData/openschemas_human/data_181.json"]
["MATCH (n:N$MATH_PROBLEMS)-[:E$MATH_PROBLEMS2PROBLEM_LEVELS]->(:N$PROBLEM_LEVELS {ID: 1}) RETURN n.ID AS ID, n.PROBLEM_LEVEL_ID AS PROBLEM_LEVEL_ID, n.QUESTION_MARKUP AS QUESTION_MARKUP, n.ANSWER_MARKUP AS ANSWER_MARKUP", "./TestData/openschemas_human/data_182.json"]
["MATCH (n:N$MATH_PROBLEMS)-[:E$MATH_PROBLEMS2MATH_PROBLEM_TEMPLATES]->(:N$MATH_PROBLEM_TEMPLATES {ID: 1}) RETURN n.ID AS ID, n.MATH_PROBLEM_TEMPLATE_ID AS MATH_PROBLEM_TEMPLATE_ID, n.QUESTION_MARKUP AS QUESTION_MARKUP, n.ANSWER_MARKUP AS ANSWER_MARKUP", "./TestData/openschemas_human/data_183.json"]
["MATCH (n:N$CARTS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_184.json"]
["MATCH (n:N$CARTS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_185.json"]
["MATCH (n:N$USERS {ID: 1}) RETURN n.NAME AS NAME, n.PASSWORD_DIGEST AS PASSWORD_DIGEST, n.ADMIN AS ADMIN, n.USERNAME AS USERNAME", "./TestData/openschemas_human/data_186.json"]
["MATCH (n:N$USERS {ID: 1}) RETURN n.NAME AS NAME, n.PASSWORD_DIGEST AS PASSWORD_DIGEST, n.ADMIN AS ADMIN, n.USERNAME AS USERNAME", "./TestData/openschemas_human/data_187.json"]
["MATCH (n:N$COMMENTS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_188.json"]
["MATCH (n:N$COMMENTS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_189.json"]
["MATCH (n:N$DJ_GENRES {ID: 1}) RETURN n.DJ_ID AS DJ_ID, n.GENRE_ID AS GENRE_ID", "./TestData/openschemas_human/data_190.json"]
["MATCH (n:N$DJ_GENRES {ID: 1}) RETURN n.DJ_ID AS DJ_ID, n.GENRE_ID AS GENRE_ID", "./TestData/openschemas_human/data_191.json"]
["MATCH (n:N$DJS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_192.json"]
["MATCH (n:N$DJS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_193.json"]
["MATCH (n:N$DJ_GENRES)-[:E$DJ_GENRES2GENRES]->(:N$GENRES {ID: 1}) RETURN n.ID AS ID, n.DJ_ID AS DJ_ID, n.GENRE_ID AS GENRE_ID", "./TestData/openschemas_human/data_194.json"]
["MATCH (n:N$DJ_GENRES)-[:E$DJ_GENRES2GENRES]->(:N$GENRES {ID: 1}) RETURN n.ID AS ID, n.DJ_ID AS DJ_ID, n.GENRE_ID AS GENRE_ID", "./TestData/openschemas_human/data_195.json"]
["MATCH (n:N$STORAGE_CHARGES {ID: 1}) RETURN n.BOX_ID AS BOX_ID, n.CHARGE_ID AS CHARGE_ID, n.START_DATE AS START_DATE, n.END_DATE AS END_DATE, n.STORAGE_CHARGE_PROCESSING_RECORD_ID AS STORAGE_CHARGE_PROCESSING_RECORD_ID", "./TestData/openschemas_human/data_196.json"]
["MATCH (n:N$STORAGE_CHARGES {ID: 1}) RETURN n.BOX_ID AS BOX_ID, n.CHARGE_ID AS CHARGE_ID, n.START_DATE AS START_DATE, n.END_DATE AS END_DATE, n.STORAGE_CHARGE_PROCESSING_RECORD_ID AS STORAGE_CHARGE_PROCESSING_RECORD_ID", "./TestData/openschemas_human/data_197.json"]
["MATCH (:N$ORDERS {ID: 1})-[:E$ORDERS2CARTS]->(n:N$CARTS) RETURN n.ID AS ID, n.USER_ID AS USER_ID, n.ORDERED_AT AS ORDERED_AT, n.STATUS AS STATUS, n.QUOTED_SHIPPING_COST AS QUOTED_SHIPPING_COST, n.QUOTED_SHIPPING_COST_SUCCESS AS QUOTED_SHIPPING_COST_SUCCESS", "./TestData/openschemas_human/data_198.json"]
["MATCH (:N$ORDERS {ID: 1})-[:E$ORDERS2CARTS]->(n:N$CARTS) RETURN n.ID AS ID, n.USER_ID AS USER_ID, n.ORDERED_AT AS ORDERED_AT, n.STATUS AS STATUS, n.QUOTED_SHIPPING_COST AS QUOTED_SHIPPING_COST, n.QUOTED_SHIPPING_COST_SUCCESS AS QUOTED_SHIPPING_COST_SUCCESS", "./TestData/openschemas_human/data_199.json"]
["MATCH (:N$RENTAL_AGREEMENT_VERSIONS_USERS {ID: 1})-[:E$RENTAL_AGREEMENT_VERSIONS_USERS2RENTAL_AGREEMENT_VERSIONS]->(n:N$RENTAL_AGREEMENT_VERSIONS) RETURN n.ID AS ID, n.AGREEMENT_TEXT AS AGREEMENT_TEXT", "./TestData/openschemas_human/data_200.json"]
["MATCH (:N$RENTAL_AGREEMENT_VERSIONS_USERS {ID: 1})-[:E$RENTAL_AGREEMENT_VERSIONS_USERS2RENTAL_AGREEMENT_VERSIONS]->(n:N$RENTAL_AGREEMENT_VERSIONS) RETURN n.ID AS ID, n.AGREEMENT_TEXT AS AGREEMENT_TEXT", "./TestData/openschemas_human/data_201.json"]
["MATCH (n:N$GROUPS_PERMISSIONS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_202.json"]
["MATCH (n:N$GROUPS_PERMISSIONS {ID: 1}) RETURN n.CREATED_AT AS CREATED_AT", "./TestData/openschemas_human/data_203.json"]
["MATCH (n:N$USERS {ID: 1}) RETURN n.UPDATED_AT AS UPDATED_AT", "./TestData/openschemas_human/data_204.json"]
["MATCH (n:N$USERS {ID: 1}) RETURN n.UPDATED_AT AS UPDATED_AT", "./TestData/openschemas_human/data_205.json"]
