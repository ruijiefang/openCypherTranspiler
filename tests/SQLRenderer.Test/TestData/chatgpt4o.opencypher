[1, "MATCH (p1:N$PERSON)-[:E$WORKSAT]->(w:N$WORKPLACE)<-[:E$WORKSAT]-(p2:N$PERSON) WHERE NOT EXISTS { MATCH (p1)-[:E$FRIENDSWITH]->(p2) } AND NOT EXISTS { MATCH (p1)<-[:E$FRIENDSWITH]-(p2) } AND ABS(p1.BORN.year - p2.BORN.year) < 5 RETURN p1.PERSID, p1.NAME, p1.BORN, p2.PERSID, p2.NAME, p2.BORN ", "./TestData/openschemas_chatgpt4o/stackoverflow_001.json"]
[2, "MATCH (n:N$NODE) WHERE (n.ID = 1234 AND n.CODE = 'PQR') OR (n.ID = 4567 AND n.CODE = 'ABC') RETURN n.ID, n.CODE ", "./TestData/openschemas_chatgpt4o/stackoverflow_002.json"]
[3, "MATCH (c:N$CUSTOMER)-[r:E$HAS_ORDER]->(o:N$SORDER) WHERE o.STATUS = 'DELIVERED' RETURN c.ID AS CUST_ID, o.ID AS ORDER_ID, o.STATUS ", "./TestData/openschemas_chatgpt4o/stackoverflow_003.json"]
[4, "MATCH (n:N$MYTABLE) WHERE n.COUNTRY IN ['NIGERIA', 'SWEDEN'] WITH n.NAME, n.COUNTRY, COUNT(n.COUNTRY) AS count RETURN n.NAME, count", "./TestData/openschemas_chatgpt4o/stackoverflow_004.json"]
[5, "MATCH (m:N$MOVIE) WHERE m.BADMOVIE = FALSE RETURN m.ID, m.TITLE ", "./TestData/openschemas_chatgpt4o/stackoverflow_005.json"]
[6, "MATCH (u:N$U {USERID: 1})-[:E$SUBSCRIBES_TO]->(c:N$C)<-[:E$BELONGS_TO]-(t:N$T) RETURN t.TEXTID, t.TEXT ", "./TestData/openschemas_chatgpt4o/stackoverflow_006.json"]
[8, "MATCH (a:N$ABC {ID: 1234})-[:E$XYZ]->(d:N$ABC) RETURN COUNT(DISTINCT d.ID) ", "./TestData/openschemas_chatgpt4o/stackoverflow_008.json"]
[9, "MATCH (fact:N$FACT)-[r:E$CREATES_PRODUCTDATA]->(productdata:N$PRODUCTDATA) WHERE productdata.RESULT_ID = 1 AND fact.PRODUCT_ID = productdata.BARCODE RETURN DISTINCT productdata.RESULT_ID AS RESULT_ID, fact.HSHLD_ID AS HSHLD_ID, productdata.CLUSTER_ID AS PRODUCT_ID", "./TestData/openschemas_chatgpt4o/stackoverflow_009.json"]
[10, "MATCH (fact:N$FACT)-[creates:E$CREATES_PRODUCTDATA]->(productdata:N$PRODUCTDATA) WHERE productdata.RESULT_ID = 1 AND fact.PRODUCT_ID = productdata.BARCODE RETURN productdata.RESULT_ID, fact.HSHLD_ID, productdata.CLUSTER_ID AS PRODUCT_ID", "./TestData/openschemas_chatgpt4o/stackoverflow_010.json"]
[11, "MATCH (p:N$PLANEAIR)-[:E$RELATION]->(n:N$TIMETAB) RETURN n.ENGINETYPE AS ENGINETYPE, n.ROCKET20 AS ROCKET20, n.YEAR AS YEARLONG, n.DISTANCE AS DISTANCEON ", "./TestData/openschemas_chatgpt4o/stackoverflow_011.json"]
[12, "MATCH (f:N$FACT)-[:E$HAS_PRODUCT]->(p:N$PRODUCT), (f)-[:E$HAS_STORE]->(s:N$STORE) WITH p, f, s WHERE s.STORE_ID IS NOT NULL WITH p, f, s, COUNT(DISTINCT f.TICKET_ID) AS ticket_count ORDER BY ticket_count DESC LIMIT 3 WITH COLLECT(p.PRODUCT_ID) AS top_products MATCH (f:N$FACT)-[:E$HAS_PRODUCT]->(p:N$PRODUCT), (f)-[:E$HAS_STORE]->(s:N$STORE) WHERE p.PRODUCT_ID IN top_products RETURN f.TICKET_ID AS TICKET_ID, p.PRODUCT_ID AS PRODUCT_ID, p.PRODUCT_DESC AS PRODUCT_DESC, f.PROMOTION_FLAG AS PROMO_FLAG, SUM(f.QUANTITY) AS SUM_UNITS, SUM(f.SALES) AS SUM_SALES", "./TestData/openschemas_chatgpt4o/stackoverflow_012.json"]
[13, "MATCH (n:N$PERSON) WHERE n.NAME = 'HOMER FLINSTONE' RETURN n.ID, n.NAME ", "./TestData/openschemas_chatgpt4o/tutorial_013.json"]
[14, "MATCH (m:N$MOVIE) WHERE m.RATING > 7 RETURN m.TITLE ", "./TestData/openschemas_chatgpt4o/tutorial_014.json"]
[15, "MATCH (a:N$ACTOR)-[:E$ACTED_IN]->(m:N$MOVIE) WHERE m.TITLE = 'THE MATRIX' RETURN a.NAME ", "./TestData/openschemas_chatgpt4o/tutorial_015.json"]
[16, "MATCH (n:N$PERSON) WITH n.ZIPCODE AS ZIPCODE, COUNT(n) AS POPULATION WHERE POPULATION > 3 RETURN ZIPCODE, POPULATION ", "./TestData/openschemas_chatgpt4o/tutorial_016.json"]
[17, "MATCH (d:N$DEPARTMENT)-[e:E$EMPLOYEE]->(p:N$PERSON) WHERE d.NAME = 'IT DEPARTMENT' RETURN p.NAME; ", "./TestData/openschemas_chatgpt4o/tutorial_017.json"]
[18, "MATCH (c1:N$CUSTOMER {CUSTOMER_ID: 1})-[:E$BOUGHT]->(p:N$PRODUCT)<-[:E$BOUGHT]-(c2:N$CUSTOMER)-[:E$BOUGHT]->(rec:N$PRODUCT) WHERE NOT (c1)-[:E$BOUGHT]->(rec) WITH rec, COUNT(DISTINCT c2) AS frequency RETURN rec.PRODUCT_NAME AS RECOMMENDATION, frequency ORDER BY frequency DESC ", "./TestData/openschemas_chatgpt4o/tutorial_018.json"]
[19, "MATCH (n:N$PERSON)-[:E$HAS_PARENT]->(p:N$PERSON)-[:E$LIVES_IN]->(c:N$CITY) RETURN n.NAME AS NAME, c.NAME AS PARENTSCITY ", "./TestData/openschemas_chatgpt4o/tutorial_019.json"]
[20, "MATCH (p:N$PERSON) WHERE p.NAME = 'TOM HANKS' RETURN p.PERSON_ID, p.NAME, p.B_YEAR ", "./TestData/openschemas_chatgpt4o/tutorial_020.json"]
[21, "MATCH (p:N$PERSON {NAME: 'TOM HANKS'})-[:E$ACTED_IN|E$DIRECTED|E$WROTE|E$PRODUCED|E$REVIEWED]->(m:N$MOVIE) RETURN m.TITLE ", "./TestData/openschemas_chatgpt4o/tutorial_021.json"]
[22, "MATCH (p:N$PERSON {NAME: 'TOM HANKS'})-[:E$DIRECTED]->(m:N$MOVIE) RETURN m.TITLE ", "./TestData/openschemas_chatgpt4o/tutorial_022.json"]
[23, "MATCH (tom:N$PERSON {NAME: 'TOM HANKS'})-[:E$ACTED_IN]->(movie:N$MOVIE)<-[:E$ACTED_IN]-(coactor:N$PERSON) MATCH (coactor)-[acted:E$ACTED_IN]->(movie) WHERE movie.TITLE = 'ACTOR' RETURN DISTINCT coactor.NAME ", "./TestData/openschemas_chatgpt4o/tutorial_023.json"]
[24, "MATCH (p:N$PRODUCT) RETURN p.PRODUCTID, p.PRODUCTNAME ", "./TestData/openschemas_chatgpt4o/tutorial_024.json"]
[25, "MATCH (p:N$PRODUCT) RETURN p.PRODUCTNAME, p.UNITPRICE ORDER BY p.UNITPRICE DESC LIMIT 3 ", "./TestData/openschemas_chatgpt4o/tutorial_025.json"]
[26, "MATCH (p:N$PRODUCT) WHERE p.PRODUCTNAME = 'CHOCOLADE' RETURN p.PRODUCTNAME, p.UNITPRICE ", "./TestData/openschemas_chatgpt4o/tutorial_026.json"]
[27, "MATCH (p:N$PRODUCT {PRODUCTNAME: 'CHOCOLADE'}) RETURN p.PRODUCTNAME, p.UNITPRICE", "./TestData/openschemas_chatgpt4o/tutorial_027.json"]
[28, "MATCH (p:N$PRODUCT) WHERE p.PRODUCTNAME IN ['CHOCOLADE', 'CHAI'] RETURN p.PRODUCTNAME, p.UNITPRICE ", "./TestData/openschemas_chatgpt4o/tutorial_028.json"]
[29, "MATCH (p:N$PRODUCT {PRODUCTNAME: 'CHOCOLADE'})<-[:E$ORDERS]-(o:N$ORDER)<-[:E$PURCHASED]-(c:N$CUSTOMER) RETURN DISTINCT c.COMPANYNAME ", "./TestData/openschemas_chatgpt4o/tutorial_029.json"]
[30, "MATCH (c:N$CUSTOMER {COMPANYNAME: 'DRACHENBLUT DELIKATESSEN'}) OPTIONAL MATCH (c)-[:E$PURCHASED]->(o:N$ORDER) OPTIONAL MATCH (o)-[ord:E$ORDERS]->(p:N$PRODUCT) RETURN p.PRODUCTNAME, SUM(ord.UNITPRICE * ord.QUANTITY) AS VOLUME", "./TestData/openschemas_chatgpt4o/tutorial_030.json"]
[31, "MATCH (e:N$EMPLOYEE)-[:E$SOLD]->(o:N$ORDER) RETURN e.EMPLOYEEID AS EMPLOYEEID, COUNT(o) AS COUNT ", "./TestData/openschemas_chatgpt4o/tutorial_031.json"]
[32, "MATCH (e:N$EMPLOYEE)-[r:E$IN_TERRITORY]->(t:N$TERRITORY) RETURN e.LASTNAME, t.TERRITORYDESCRIPTION", "./TestData/openschemas_chatgpt4o/tutorial_032.json"]
[33, "MATCH (m:N$MOVIE) RETURN m.TITLE ", "./TestData/openschemas_chatgpt4o/tutorial_033.json"]
[34, "MATCH (m:N$MOVIE) WHERE m.RELEASED > 1998 RETURN m.TITLE ", "./TestData/openschemas_chatgpt4o/tutorial_034.json"]
[35, "MATCH (person:N$PERSON)-[acted_in:E$ACTED_IN]->(movie:N$MOVIE) RETURN person.NAME, movie.TITLE ", "./TestData/openschemas_chatgpt4o/tutorial_035.json"]
[36, "MATCH (keanu:N$PERSON)-[:E$ACTED_IN]->(movie:N$MOVIE)<-[:E$ACTED_IN]-(coActor:N$PERSON) WHERE keanu.NAME = 'KEANU REEVES' AND coActor.ID <> keanu.ID RETURN DISTINCT coActor.NAME", "./TestData/openschemas_chatgpt4o/tutorial_036.json"]
[37, "MATCH (p:N$PERSON)-[:E$ACTED_IN]->(m:N$MOVIE) MATCH (p)-[:E$PRODUCED]->(m) RETURN p.NAME ", "./TestData/openschemas_chatgpt4o/tutorial_037.json"]
[38, "MATCH (keanu:N$PERSON {NAME: 'KEANU REEVES'})-[:E$ACTED_IN]->(movie:N$MOVIE)<-[:E$DIRECTED]-(director:N$PERSON) RETURN director.NAME, COUNT(*) ", "./TestData/openschemas_chatgpt4o/tutorial_038.json"]
[39, "MATCH (d1:N$DOC {ID: 0})-[:E$HAS]->(t:N$TERM)<-[:E$HAS]-(d2:N$DOC) RETURN d2.ID AS DOCID, COUNT(t) AS TermCount ", "./TestData/openschemas_chatgpt4o/academic_039.json"]
[40, "MATCH (d1:N$DOC {ID: 0})-[:E$HAS]->(t:N$TERM)<-[:E$HAS]-(d2:N$DOC) WITH d1, d2, t MATCH (d1)-[rel1:E$HAS]->(t), (d2)-[rel2:E$HAS]->(t) RETURN d2.ID AS DOCID, SUM(rel1.FRE * rel2.FRE) AS FRE_SUM", "./TestData/openschemas_chatgpt4o/academic_040.json"]
[41, "MATCH (t1:N$TERM {ID: 1})-[:E$IN]->(d:N$DOC)-[:E$HAS]->(t2:N$TERM {ID: 2}) MATCH (t3:N$TERM {ID: 3})-[:E$IN]->(d) WITH d MATCH (d)-[:E$INCLUDE]->(a:N$AUTHOR) RETURN a.ID AS AUTHORID, COUNT(d) AS count", "./TestData/openschemas_chatgpt4o/academic_041.json"]
[42, "MATCH (t1:N$TERM {ID: 1})-[:E$IN]->(d:N$DOC)-[:E$HAS]->(t2:N$TERM {ID: 2}), (t2)-[:E$IN]->(d)-[:E$HAS]->(t3:N$TERM {ID: 3}), (d)-[include:E$INCLUDE]->(a:N$AUTHOR) WITH a.ID AS AUTHORID, include.FRE AS FRE RETURN AUTHORID, SUM(FRE) AS total_frequency ", "./TestData/openschemas_chatgpt4o/academic_042.json"]
[43, "MATCH (a1:N$AUTHOR {ID: 1})-[:E$PUBLISH]->(d1:N$DOC)-[:E$HAS]->(t:N$TERM)<-[:E$HAS]-(d2:N$DOC)<-[:E$PUBLISH]-(a2:N$AUTHOR) MATCH (d1)-[h1:E$HAS]->(t)<-[h2:E$HAS]-(d2) RETURN a2.ID AS AUTHORID, SUM(h1.FRE * h2.FRE) AS FRE_SUM", "./TestData/openschemas_chatgpt4o/academic_043.json"]
[44, "MATCH (c1:N$CONCEPT {CID: 1})-[:E$CS]->(p1:N$PA)-[:E$SP]->(s1:N$SENTENCE) WITH COLLECT(s1.SID) AS sids MATCH (c2:N$CONCEPT)-[e2:E$CS]->(p2:N$PA)-[e3:E$SP]->(s2:N$SENTENCE) WHERE s2.SID IN sids RETURN c2.CID, COUNT(*)", "./TestData/openschemas_chatgpt4o/academic_044.json"]
[45, "MATCH (a:N$ADMISSIONS)-[r1:E$ADMISSIONS_DOCTORS]->(d:N$DOCTORS), (a)-[r2:E$ADMISSIONS_PATIENTS]->(p:N$PATIENTS) WHERE d.SPECIALITY = 'INTERNAL MEDICINE' AND p.NAME = 'TOSAHWI AYELEN' RETURN a.ADMI_DATE", "./TestData/openschemas_chatgpt4o/academic_045.json"]
[66, "MATCH (itm:N$ITM) WHERE itm.ITEMN > 1 AND itm.ITEMN < 20 MATCH (pur:N$PUR)-[:E$RELATED_TO]->(itp:N$ITP) WHERE pur.ODATE > 85 AND itp.ITEMN = itm.ITEMN RETURN itm.ITEMN, pur.VENDN ", "./TestData/openschemas_chatgpt4o/literature_066.json"]
[67, "MATCH (n1:N$ITP) WHERE n1.NP > 1000 WITH DISTINCT n1.ITEMNO AS ITN, n1.NP AS NP MATCH (n2:N$ITM) WHERE n2.ITEMNO = ITN RETURN NP, n2.TYPE AS TYPE, n2.ITEMNO AS ITEMNO", "./TestData/openschemas_chatgpt4o/literature_067.json"]
[68, "MATCH (n1:N$ITP) WHERE EXISTS { MATCH (n2:N$ITL) WHERE n1.ITEMN = n2.ITEMN AND n2.WKCEN = 468 AND n2.LOCAN = 0 } RETURN n1.ITEMN AS ITEMN, n1.PONUM AS PONUM ", "./TestData/openschemas_chatgpt4o/literature_068.json"]
[69, "MATCH (x:N$EMP)-[r:E$WORK_AT]->(d:N$DEPT {LOC: 3}) WHERE x.EMP = d.MGR RETURN x.NAME AS XN", "./TestData/openschemas_chatgpt4o/literature_069.json"]
[70, "MATCH (x:N$USER), (y:N$PICTURE) WHERE x.UID = y.UID AND x.CITY = 3 AND y.SIZE > 1000000 RETURN x.UID AS UID, x.UNAME AS UNAME, COUNT(*) AS CNT ", "./TestData/openschemas_chatgpt4o/literature_070.json"]
[71, "MATCH (x:N$USR), (u:N$PIC), (v:N$PIC), (w:N$PIC) WHERE x.USRUID = u.PICUID AND x.USRUID = v.PICUID AND x.USRUID = w.PICUID AND w.PICSIZE = v.PICSIZE AND u.PICUID IS NOT NULL AND v.PICUID IS NULL RETURN DISTINCT x.USRUID AS XID, x.USRNAME AS XNAME", "./TestData/openschemas_chatgpt4o/literature_071.json"]
[72, "MATCH (x:N$EMP)-[:E$WORK_AT]->(y:N$DEPT) WHERE y.LOC = 3 AND x.EMP = y.MGR RETURN x.NAME AS XN ", "./TestData/openschemas_chatgpt4o/literature_072.json"]
[73, "MATCH (course:N$COURSE)-[:E$BELONGS_TO]->(department:N$DEPARTMENT), (instructor:N$INSTRUCTOR)-[:E$WORK_AT]->(department), (instructor)-[:E$TEACHES]->(course) WITH department.DEPT_NAME AS dept_name, AVG(instructor.SALARY) AS avg_salary, COUNT(DISTINCT instructor.SALARY) AS distinct_salaries WHERE avg_salary > 50000 AND distinct_salaries = 4 RETURN dept_name, avg_salary ", "./TestData/openschemas_chatgpt4o/literature_073.json"]
[74, "MATCH (student:N$STUDENT)-[studies:E$STUDY_AT]->(dept:N$DEPARTMENT)<-[belongs:E$BELONGS_TO]-(course:N$COURSE), (student)-[takes:E$TAKES]->(section:N$SECTION) WITH student, dept, COUNT(dept.DEPT_NAME) AS deptCount WHERE deptCount > 1 RETURN student.ID", "./TestData/openschemas_chatgpt4o/literature_074.json"]
[75, "MATCH (s:N$STUDENT)-[:E$TAKES]->(sec:N$SECTION) WITH s, sec.TIME_SLOT_ID, sec.YEAR, COUNT(sec.TIME_SLOT_ID) AS timeSlotCount WHERE timeSlotCount > 1 WITH s, COUNT(DISTINCT s.ID) AS studentCount WHERE studentCount > 2 RETURN s.ID, s.NAME ", "./TestData/openschemas_chatgpt4o/literature_075.json"]
[76, "MATCH (i:N$INSTRUCTOR)-[t:E$TEACHES]->(c:N$COURSE) WITH t.YEAR AS T, t.COURSE_ID AS COURSE_ID, COUNT(i.ID) AS InstructorCount WHERE InstructorCount > 4 WITH T, SUM(T) AS SU RETURN SU ORDER BY T", "./TestData/openschemas_chatgpt4o/literature_076.json"]
[77, "MATCH (s:N$STUDENT)-[t:E$TAKES]->(sec:N$SECTION) WITH s, sec.TIME_SLOT_ID AS timeSlotId, t.YEAR AS year, COUNT(sec.TIME_SLOT_ID) AS countTimeSlots WHERE countTimeSlots > 4 MATCH (s:N$STUDENT) RETURN DISTINCT s.ID AS ID, s.NAME AS NAME", "./TestData/openschemas_chatgpt4o/literature_077.json"]
[78, "MATCH (f:N$FLIGHTS) WITH f.ORIGIN_CITY AS origin_city, MAX(f.ACTUAL_TIME) AS max_time MATCH (f2:N$FLIGHTS) WHERE f2.ORIGIN_CITY = origin_city AND f2.ACTUAL_TIME = max_time RETURN DISTINCT f2.ORIGIN_CITY, f2.DEST_CITY, f2.ACTUAL_TIME ", "./TestData/openschemas_chatgpt4o/literature_078.json"]
[79, "MATCH (c:N$COURSE)-[:E$BELONGS_TO]->(d:N$DEPARTMENT)<-[:E$WORK_AT]-(i:N$INSTRUCTOR) WITH d.DEPT_NAME AS deptName, SUM(i.SALARY) AS totalSalary, MAX(i.SALARY) AS maxSalary WHERE totalSalary > 100 AND maxSalary < 75 RETURN deptName, totalSalary ", "./TestData/openschemas_chatgpt4o/literature_079.json"]
[80, "MATCH (course:N$COURSE)-[:E$BELONGS_TO]->(department:N$DEPARTMENT), (instructor:N$INSTRUCTOR)-[:E$TEACHES]->(course) WITH department.DEPT_NAME AS deptName, SUM(department.BUDGET) AS totalBudget, COUNT(department.BUDGET) AS budgetCount WHERE totalBudget > 100000 AND budgetCount > 10 RETURN deptName, totalBudget ", "./TestData/openschemas_chatgpt4o/literature_080.json"]
[81, "MATCH (c:N$COURSE)-[:E$BELONGS_TO]->(d:N$DEPARTMENT), (i:N$INSTRUCTOR)-[:E$TEACHES]->(c), (i)-[:E$WORK_AT]->(d) WITH d.DEPT_NAME AS deptName, AVG(i.SALARY) AS avgSalary, COUNT(DISTINCT i.SALARY) AS salaryCount WHERE avgSalary > 50000 AND salaryCount = 4 RETURN deptName, avgSalary ", "./TestData/openschemas_chatgpt4o/literature_081.json"]
[82, "MATCH (d:N$DEPARTMENT)<-[:E$BELONGS_TO]-(c:N$COURSE)<-[t:E$TEACHES]-(t:N$INSTRUCTOR) WHERE d.BUDGET = t.YEAR + 4 WITH t.SEMESTER AS semester, SUM(c.CREDITS) AS total_credits, AVG(c.CREDITS) AS avg_credits, COUNT(DISTINCT d.BUILDING) AS building_count WHERE avg_credits > 2 AND building_count = 2 RETURN semester, total_credits", "./TestData/openschemas_chatgpt4o/literature_082.json"]
[83, "MATCH (course:N$COURSE)-[:E$BELONGS_TO]->(dept:N$DEPARTMENT), (student:N$STUDENT)-[:E$STUDY_AT]->(dept), (student)-[:E$TAKES]->(section:N$SECTION) WITH student.ID AS ID, dept.DEPT_NAME AS DEPT_NAME, COUNT(dept.DEPT_NAME) AS dept_count WHERE dept_count > 1 RETURN ID", "./TestData/openschemas_chatgpt4o/literature_083.json"]
[84, "MATCH (s:N$STUDENT)-[t:E$TAKES]->(sec:N$SECTION) WITH s, sec.TIME_SLOT_ID, sec.YEAR, COUNT(sec.TIME_SLOT_ID) AS time_slot_count WHERE time_slot_count > 1 WITH s, COUNT(DISTINCT s.ID) AS student_count WHERE student_count > 2 RETURN s.ID, s.NAME ", "./TestData/openschemas_chatgpt4o/literature_084.json"]
[85, "MATCH (student:N$STUDENT)-[:E$TAKES]->(section:N$SECTION) WITH student, section.YEAR AS year, COUNT(DISTINCT section.TIME_SLOT_ID) AS time_slot_count WHERE time_slot_count > 4 MATCH (student)-[:E$STUDY_AT]->(department:N$DEPARTMENT) RETURN DISTINCT student.ID AS ID, student.NAME AS NAME ", "./TestData/openschemas_chatgpt4o/literature_085.json"]
[86, "MATCH (p:N$PERSON) OPTIONAL MATCH (p)-[r:E$LIVE_IN]->(a:N$ADDRESS) RETURN p.FIRSTNAME AS FIRSTNAME, p.LASTNAME AS LASTNAME, a.CITY AS CITY, a.STATE AS STATE ", "./TestData/openschemas_chatgpt4o/leetcode_086.json"]
[87, "MATCH (c:N$CUSTOMERS) WHERE NOT EXISTS { MATCH (c)-[:E$HAS_ORDER]->(:N$ORDERS) } RETURN c.NAME AS CUSTOMERS ", "./TestData/openschemas_chatgpt4o/leetcode_087.json"]
[88, "MATCH (e:N$EMPLOYEE) OPTIONAL MATCH (e)-[r:E$HAS]->(b:N$BONUS) WHERE b.BONUS < 1000 OR b.BONUS IS NULL RETURN e.NAME, b.BONUS ", "./TestData/openschemas_chatgpt4o/leetcode_088.json"]
[89, "MATCH (s:N$SALESPERSON) WHERE NOT EXISTS { MATCH (s)<-[:E$ORDERS]-(c:N$COMPANY {NAME: 'RED'}) } RETURN DISTINCT s.NAME AS NAME ", "./TestData/openschemas_chatgpt4o/leetcode_089.json"]
[90, "MATCH (p:N$PRODUCT) WITH COUNT(*) AS NOP MATCH (c:N$CUSTOMER)-[:E$BOUGHT]->(p:N$PRODUCT) WITH c.CUSTOMER_ID AS CUSTOMER_ID, COUNT(DISTINCT p.PRODUCT_KEY) AS NOPRODUCTSBOUGHT, NOP WITH CUSTOMER_ID, NOPRODUCTSBOUGHT, NOP WHERE NOPRODUCTSBOUGHT = NOP RETURN CUSTOMER_ID", "./TestData/openschemas_chatgpt4o/leetcode_090.json"]
[91, "MATCH (n:N$ACTORDIRECTOR) WITH n.ACTOR_ID AS ACTOR_ID, n.DIRECTOR_ID AS DIRECTOR_ID, COUNT(*) AS count WHERE count >= 3 RETURN ACTOR_ID, DIRECTOR_ID ", "./TestData/openschemas_chatgpt4o/leetcode_091.json"]
[92, "MATCH (p:N$PROJECT)<-[w:E$WORK]-(e:N$EMPLOYEE) WITH p.PROJECT_ID AS project_id, AVG(e.EXPERIENCE_YEARS) AS average_years RETURN project_id, average_years ", "./TestData/openschemas_chatgpt4o/leetcode_092.json"]
[93, "MATCH (p:N$PRODUCT)-[s:E$SELL]->(sale:N$SALES) WHERE p.PRODUCT_NAME = 'S8' AND NOT EXISTS { MATCH (p2:N$PRODUCT)-[s2:E$SELL]->(sale2:N$SALES) WHERE p2.PRODUCT_NAME = 'IPHONE' AND sale2.BUYER_ID = sale.BUYER_ID } RETURN DISTINCT sale.BUYER_ID AS BUYER_ID ", "./TestData/openschemas_chatgpt4o/leetcode_093.json"]
[94, "MATCH (p:N$PRODUCT)-[s:E$SELL]->(sa:N$SALES) WHERE sa.SALE_DATE >= '2019-01-01' AND sa.SALE_DATE <= '2019-03-31' WITH p, MIN(sa.SALE_DATE) as minDate, MAX(sa.SALE_DATE) as maxDate WHERE minDate >= '2019-01-01' AND maxDate <= '2019-03-31' RETURN p.PRODUCT_ID, p.PRODUCT_NAME ", "./TestData/openschemas_chatgpt4o/leetcode_094.json"]
[95, "MATCH (a:N$ACTIONS) WHERE a.ACTION = 'REPORT' AND a.EXTRA = 'SPAM' OPTIONAL MATCH (a)-[r:E$RELATED_TO]->(b:N$REMOVALS) WITH a.ACTION_DATE AS action_date, COUNT(DISTINCT b.POST_ID) AS removed_posts, COUNT(DISTINCT r.POST_ID) AS total_posts RETURN 100 * AVG(removed_posts * 1.0 / total_posts) AS AVERAGE_DAILY_PERCENT ", "./TestData/openschemas_chatgpt4o/leetcode_095.json"]
[96, "MATCH (u:N$UNITSSOLD)-[r:E$RELATED_TO]->(p:N$PRICES) WHERE u.PURCHASE_DATE >= p.START_DATE AND u.PURCHASE_DATE <= p.END_DATE WITH u.PRODUCT_ID AS PRODUCT_ID, SUM(u.UNITS * p.PRICE) AS total_price, SUM(u.UNITS) AS total_units RETURN PRODUCT_ID, total_price / total_units AS AVERAGE_PRICE ", "./TestData/openschemas_chatgpt4o/leetcode_096.json"]
[97, "MATCH (u1:N$USER {ID: 1})-[:E$FRIENDSHIP]->(friend:N$USER)-[:E$LIKES]->(page:N$PAGE) WHERE NOT EXISTS { MATCH (u1)-[:E$LIKES]->(page) } RETURN DISTINCT page.ID AS RECOMMENDED_PAGE ", "./TestData/openschemas_chatgpt4o/leetcode_097.json"]
[98, "MATCH (s:N$STUDENTS) WHERE NOT (s)-[:E$BELONG_TO]->(:N$DEPARTMENTS) RETURN s.ID AS ID, s.NAME AS NAME; ", "./TestData/openschemas_chatgpt4o/leetcode_098.json"]
[99, "MATCH (e1:N$EMPLOYEES) OPTIONAL MATCH (e2:N$EMPLOYEEUNI)-[r:E$IS]->(e1) RETURN e2.UNIQUE_ID AS UNIQUE_ID, e1.NAME AS NAME ", "./TestData/openschemas_chatgpt4o/leetcode_099.json"]
[100, "MATCH (c:N$CUSTOMERS)-[r1:E$HAS]->(o1:N$ORDERS) WHERE o1.PRODUCT_NAME = 'A' WITH DISTINCT c MATCH (c)-[r2:E$HAS]->(o2:N$ORDERS) WHERE o2.PRODUCT_NAME = 'B' WITH DISTINCT c MATCH (c)-[r3:E$HAS]->(o3:N$ORDERS) WHERE o3.PRODUCT_NAME = 'C' WITH DISTINCT c WHERE NOT (c)-[r3]->(o3) RETURN c.CUSTOMER_ID, c.CUSTOMER_NAME ORDER BY c.CUSTOMER_ID ", "./TestData/openschemas_chatgpt4o/leetcode_100.json"]
[101, "MATCH (v:N$VISITS) OPTIONAL MATCH (v)-[r:E$HAS]->(t:N$TRANSACTIONS) WITH v, t WHERE t IS NULL RETURN v.CUSTOMER_ID AS CUSTOMER_ID, COUNT(v) AS COUNT_NO_TRANS ", "./TestData/openschemas_chatgpt4o/leetcode_101.json"]
[102, "MATCH (u:N$USERS)-[e:E$HAS]->(t:N$TRANSACTIONS) WITH u, SUM(t.AMOUNT) AS BALANCE WHERE BALANCE > 3 RETURN u.NAME, BALANCE", "./TestData/openschemas_chatgpt4o/leetcode_102.json"]
[103, "MATCH (p:N$PRODUCT) OPTIONAL MATCH (p)-[r:E$BELONG_TO]->(i:N$INVOICE) RETURN p.NAME AS NAME, SUM(i.REST) AS REST, SUM(i.PAID) AS PAID, SUM(i.CANCELED) AS CANCELED, SUM(i.REFUNDED) AS REFUNDED  ORDER BY p.NAME ", "./TestData/openschemas_chatgpt4o/leetcode_103.json"]
[104, "MATCH (d:N$DAILYSALES) WITH d.DATE_ID AS DATE_ID, d.MAKE_NAME AS MAKE_NAME, COUNT(DISTINCT d.LEAD_ID) AS UNIQUE_LEADS, COUNT(DISTINCT d.PARTNER_ID) AS UNIQUE_PARTNERS RETURN DATE_ID, MAKE_NAME, UNIQUE_LEADS, UNIQUE_PARTNERS ", "./TestData/openschemas_chatgpt4o/leetcode_104.json"]
[105, "MATCH (c:N$CHESTS)-[r:E$RELATED_TO]->(b:N$BOXES) RETURN SUM(b.APPLE_COUNT + c.APPLE_COUNT) AS APPLE_COUNT, SUM(b.ORANGE_COUNT + c.ORANGE_COUNT) AS ORANGE_COUNT ", "./TestData/openschemas_chatgpt4o/leetcode_105.json"]
[106, "MATCH (m:N$MEMBER) WHERE m.MNAME = '1' RETURN m.ADDRESS, m.CITY, m.STATE, m.ZIPCODE", "./TestData/openschemas_chatgpt4o/data_106.json"]
[107, "MATCH (member:N$MEMBER {MNAME: '1'})-[:E$MEMBER_ADDRESS]->(address:N$ADDRESS) RETURN address.ADDRESS, address.CITY, address.STATE, address.ZIPCODE", "./TestData/openschemas_chatgpt4o/data_107.json"]
[108, "MATCH (e:N$EMPLOYEE {EID: 1})-[:E$EMPLOYEE_EMAIL]->(email:N$EMAIL) RETURN email.WORK_EMAIL, email.PERSONAL_EMAIL", "./TestData/openschemas_chatgpt4o/data_108.json"]
[109, "MATCH (e1:N$EMPLOYEE {EID: 1}) RETURN e1.WORK_EMAIL, e1.PERSONAL_EMAIL", "./TestData/openschemas_chatgpt4o/data_109.json"]
[110, "MATCH (project:N$PROJECT)-[:E$PROJ_EMP]->(employee:N$EMPLOYEE) WHERE project.PNAME = '1' RETURN employee.ENAME", "./TestData/openschemas_chatgpt4o/data_110.json"]
[111, "MATCH (p:N$PROJECT {PNAME: '1'})-[:E$PROJ_EMP]->(e:N$EMPLOYEE) RETURN e.ENAME", "./TestData/openschemas_chatgpt4o/data_111.json"]
[112, "MATCH (e:N$EMPLOYEE)-[r:E$EMPLOYEE_EMPLOYEEIDENTIFICATION]->(id:N$EMPLOYEEIDENTIFICATION) WHERE e.EMPLOYEENUMBER = 1 RETURN e.PHONENUMBER", "./TestData/openschemas_chatgpt4o/data_112.json"]
[113, "MATCH (e:N$EMPLOYEE {EMPLOYEENUMBER: 1}) RETURN e.PHONENUMBER", "./TestData/openschemas_chatgpt4o/data_113.json"]
[114, "MATCH (e:N$EMPLOYEE {EMPLOYEENUMBER: 1})-[:E$EMPLOYEE_EMPLOYEEIDENTIFICATION]->(i:N$EMPLOYEEIDENTIFICATION) RETURN i.VOICEPRINT", "./TestData/openschemas_chatgpt4o/data_114.json"]
[115, "MATCH (e:N$EMPLOYEE {EMPLOYEENUMBER: 1}) RETURN e.VOICEPRINT", "./TestData/openschemas_chatgpt4o/data_115.json"]
[116, "MATCH (e:N$EMPLOYEE {EMPLOYEENUMBER: 1}) RETURN e.NAME", "./TestData/openschemas_chatgpt4o/data_116.json"]
[117, "MATCH (e:N$EMPLOYEE {EMPLOYEENUMBER: 1}) RETURN e.NAME", "./TestData/openschemas_chatgpt4o/data_117.json"]
[118, "MATCH (e:N$EMPLOYEE {EMPLOYEENUMBER: 1}) RETURN e.VOICEPRINT", "./TestData/openschemas_chatgpt4o/data_118.json"]
[119, "MATCH (e:N$EMPLOYEE {EMPLOYEENUMBER: 1})-[rel:E$EMPLOYEE_EMPLOYEEIDENTIFICATION]->(eid:N$EMPLOYEEIDENTIFICATION) RETURN eid.VOICEPRINT", "./TestData/openschemas_chatgpt4o/data_119.json"]
[120, "MATCH (c:N$CUSTOMER) WHERE c.FIRSTNAME = 1 RETURN c.CUSTOMERID", "./TestData/openschemas_chatgpt4o/data_120.json"]
[121, "MATCH (c:N$CUSTOMER {FIRSTNAME: 1})-[:E$HAS]->(a:N$ACCOUNT) RETURN c.CUSTOMERID", "./TestData/openschemas_chatgpt4o/data_121.json"]
[122, "MATCH (c:N$CUSTOMER {CUSTOMERID: 1})-[:E$HAS]->(a:N$ACCOUNT) RETURN a.ACCOUNTID", "./TestData/openschemas_chatgpt4o/data_122.json"]
[123, "MATCH (c:N$CUSTOMER {CUSTOMERID: 1})-[:E$HAS]->(a:N$ACCOUNT) RETURN a.ACCOUNTID", "./TestData/openschemas_chatgpt4o/data_123.json"]
[124, "MATCH (customer:N$CUSTOMER {CUSTOMERID: 1})-[has:E$HAS]->(account:N$ACCOUNT) RETURN account.BALANCE", "./TestData/openschemas_chatgpt4o/data_124.json"]
[125, "MATCH (c:N$CUSTOMER)-[r:E$HAS]->(a:N$ACCOUNT) WHERE c.CUSTOMERID = 1 RETURN c.BALANCE AS BALANCE", "./TestData/openschemas_chatgpt4o/data_125.json"]
[126, "MATCH (n:N$CUSTOMER {FIRSTNAME: 1}) RETURN n.CUSTOMERID", "./TestData/openschemas_chatgpt4o/data_126.json"]
[127, "MATCH (n:N$CUSTOMER) WHERE n.FNAME = 1 RETURN n.CUSTOMERID", "./TestData/openschemas_chatgpt4o/data_127.json"]
[128, "MATCH (n:N$CUSTOMER {CUSTOMERID: 1}) RETURN n.FIRSTNAME", "./TestData/openschemas_chatgpt4o/data_128.json"]
[129, "MATCH (n:N$CUSTOMER {CUSTOMERID: 1}) RETURN n.FNAME AS FIRSTNAME", "./TestData/openschemas_chatgpt4o/data_129.json"]
[130, "MATCH (customer:N$CUSTOMER {NAME: 1}) RETURN customer.CUSTOMERPOID", "./TestData/openschemas_chatgpt4o/data_130.json"]
[131, "MATCH (customer:N$CUSTOMER)-[holds:E$HOLDS]->(policy:N$POLICY) WHERE customer.NAME = 1 RETURN customer.CUSTOMERPOID", "./TestData/openschemas_chatgpt4o/data_131.json"]
[132, "MATCH (c:N$CUSTOMER {NAME: 1})-[:E$HOLDS]->(p:N$POLICY) RETURN p.POLICYID AS POLICYID, p.AMOUNT AS AMOUNT", "./TestData/openschemas_chatgpt4o/data_132.json"]
[133, "MATCH (c:N$CUSTOMER {NAME: 1})-[:E$HOLDS]->(p:N$POLICY) RETURN p.POLICYID, p.AMOUNT", "./TestData/openschemas_chatgpt4o/data_133.json"]
[134, "MATCH (a:N$ADDRESS)-[r:E$ADDRESS_STATE]->(s:N$STATE) WHERE a.AID = 1 RETURN a.STREET AS STREET, a.CITY AS CITY, s.NAME AS NAME, a.COUNTRYCODE AS COUNTRYCODE", "./TestData/openschemas_chatgpt4o/data_134.json"]
[135, "MATCH (a:N$ADDRESS {AID: 1})-[:E$ADDRESS_STATE]->(s:N$STATE) RETURN a.STREET, a.CITY, s.NAME, a.COUNTRYCODE", "./TestData/openschemas_chatgpt4o/data_135.json"]
[136, "MATCH (s:N$STATE {STATECODE: 1}) RETURN s.NAME", "./TestData/openschemas_chatgpt4o/data_136.json"]
[137, "MATCH (s:N$STATE {STATECODE: 1}) RETURN s.NAME", "./TestData/openschemas_chatgpt4o/data_137.json"]
[138, "MATCH (n:N$STATE {STATECODE: 1}) RETURN n.NAME", "./TestData/openschemas_chatgpt4o/data_138.json"]
[139, "MATCH (s:N$STATE) WHERE s.STATECODE = 1 RETURN s.NAME", "./TestData/openschemas_chatgpt4o/data_139.json"]
[140, "MATCH (a:N$ADDRESS {ADDRESSID: 1})-[:E$ADDRESS_STATE]->(s:N$STATE) RETURN a.STREET, a.CITY, s.NAME, a.ZIPCODE", "./TestData/openschemas_chatgpt4o/data_140.json"]
[141, "MATCH (a:N$ADDRESS {ADDRESSID: 1})-[:E$ADDRESS_STATE]->(s:N$STATE) RETURN a.STREET, a.CITY, s.NAME, a.ZIPCODE", "./TestData/openschemas_chatgpt4o/data_141.json"]
[142, "MATCH (i:N$INVOICES {INVOICEID: 1})-[:E$INVOICES_CUSTOMERS]->(c:N$CUSTOMERS) RETURN c.CITYID", "./TestData/openschemas_chatgpt4o/data_142.json"]
[143, "MATCH (i:N$INVOICES {INVOICEID: 1})-[:E$INVOICES_CUSTOMERS]->(c:N$CUSTOMERS) RETURN c.CITYID", "./TestData/openschemas_chatgpt4o/data_143.json"]
[144, "MATCH (i:N$INVOICES)-[e:E$INVOICES_CUSTOMERS]->(c:N$CUSTOMERS) WHERE i.INVOICEID = 1 RETURN i.INVOICEDATE", "./TestData/openschemas_chatgpt4o/data_144.json"]
[145, "MATCH (n: N$INVOICES {INVOICEID: 1}) RETURN n.INVOICEDATE", "./TestData/openschemas_chatgpt4o/data_145.json"]
[146, "MATCH (identity:N$IDENTITIES {IDENTITIES_ID: 1})-[rel:E$IDENTITIES2USERS]->(user:N$USERS) RETURN identity.IDENTITIES_USER_ID AS user_id, identity.IDENTITIES_PROVIDER AS provider, identity.IDENTITIES_TOKEN AS token ", "./TestData/openschemas_chatgpt4o/data_146.json"]
[148, "MATCH (lab:N$LABORATORIES {LABORATORIES_ID: 1}) RETURN lab.LABORATORIES_UPDATED_AT", "./TestData/openschemas_chatgpt4o/data_148.json"]
[150, "MATCH (policy:N$POLICIES {POLICIES_ID: 1}) MATCH (policy)-[:E$POLICIES2USERS1]->(user:N$USERS) MATCH (policy)-[:E$POLICIES2USERS2]->(granter:N$USERS) RETURN user.USERS_ID AS POLICIES_USER_ID, granter.USERS_ID AS POLICIES_GRANTER_ID, policy.POLICIES_DEFINITION AS POLICIES_DEFINITION, policy.POLICIES_DELEGABLE AS POLICIES_DELEGABLE, policy.POLICIES_NAME AS POLICIES_NAME", "./TestData/openschemas_chatgpt4o/data_150.json"]
[152, "MATCH (p:N$POLICIES)-[:E$POLICIES2USERS1]->(u:N$USERS) WHERE u.USERS_ID = 1 RETURN p.POLICIES_ID AS POLICIES_ID, p.POLICIES_USER_ID AS POLICIES_USER_ID, p.POLICIES_GRANTER_ID AS POLICIES_GRANTER_ID, p.POLICIES_DEFINITION AS POLICIES_DEFINITION, p.POLICIES_DELEGABLE AS POLICIES_DELEGABLE, p.POLICIES_NAME AS POLICIES_NAME", "./TestData/openschemas_chatgpt4o/data_152.json"]
[154, "MATCH (u:N$USERS {USERS_ID: 1})<-[:E$SUBSCRIBERS2USERS]-(s:N$SUBSCRIBERS) RETURN s.SUBSCRIBERS_ID, s.SUBSCRIBERS_USER_ID, s.SUBSCRIBERS_NAME, s.SUBSCRIBERS_URL, s.SUBSCRIBERS_FIELDS, s.SUBSCRIBERS_LAST_RUN_AT, s.SUBSCRIBERS_URL_USER, s.SUBSCRIBERS_URL_PASSWORD", "./TestData/openschemas_chatgpt4o/data_154.json"]
[156, "MATCH (course:N$COURSES {ID: 1})  OPTIONAL MATCH (course)-[r1:E$COURSES_LOCATIONS]->(location:N$LOCATIONS) RETURN course.TITLE AS TITLE, course.DESCRIPTION AS DESCRIPTION, course.PRICE AS PRICE, course.COACH_ID AS COACH_ID, course.SPORT AS SPORT, course.MAX_PARTICIPANTS AS MAX_PARTICIPANTS, location.ADDRESS AS ADDRESS, location.LATITUDE AS LATITUDE, location.LONGITUDE AS LONGITUDE", "./TestData/openschemas_chatgpt4o/data_156.json"]
[157, "MATCH (c:N$COURSES)-[:E$COURSES_USERS]->(u:N$USERS) WHERE c.ID = 1 RETURN c.TITLE AS Title, c.DESCRIPTION AS Description, c.PRICE AS Price, c.COACH_ID AS CoachId, c.SPORT AS Sport, c.MAX_PARTICIPANTS AS MaxParticipants, c.ADDRESS AS Address, c.LATITUDE AS Latitude, c.LONGITUDE AS Longitude", "./TestData/openschemas_chatgpt4o/data_157.json"]
[158, "MATCH (u:N$USERS {ID: 1})<-[:E$COURSES_USERS]-(c:N$COURSES) MATCH (c)-[:E$COURSES_LOCATIONS]->(loc:N$LOCATIONS) RETURN c.TITLE AS Title, c.DESCRIPTION AS Description, c.PRICE AS Price, c.SPORT AS Sport, c.MAX_PARTICIPANTS AS MaxParticipants, loc.ADDRESS AS Address, loc.LATITUDE AS Latitude, loc.LONGITUDE AS Longitude", "./TestData/openschemas_chatgpt4o/data_158.json"]
[159, "MATCH (c:N$COURSES)-[e:E$COURSES_USERS]->(u:N$USERS) WHERE u.ID = 1 RETURN c.TITLE, c.DESCRIPTION, c.PRICE, c.SPORT, c.MAX_PARTICIPANTS, c.ADDRESS AS ADDRESS, c.LATITUDE AS LATITUDE, c.LONGITUDE AS LONGITUDE ", "./TestData/openschemas_chatgpt4o/data_159.json"]
[160, "MATCH (u:N$USERS {ID: 1})<-[:E$COURSES_USERS]-(c:N$COURSES) MATCH (c)-[:E$COURSES_LOCATIONS]->(l:N$LOCATIONS) RETURN c.ID, c.TITLE, c.DESCRIPTION, c.PRICE, c.COACH_ID, c.SPORT, c.MAX_PARTICIPANTS, c.LOCATION_ID AS ADDRESS, l.LATITUDE AS LATITUDE, l.LONGITUDE AS LONGITUDE", "./TestData/openschemas_chatgpt4o/data_160.json"]
[161, "MATCH (c:N$COURSES)-[e1:E$COURSES_USERS]->(u:N$USERS {ID: 1}) RETURN c.ID AS CourseID, c.TITLE AS Title, c.DESCRIPTION AS Description, c.PRICE AS Price, c.COACH_ID AS CoachID, c.SPORT AS Sport, c.MAX_PARTICIPANTS AS MaxParticipants, c.ADDRESS AS Address, c.LATITUDE AS Latitude, c.LONGITUDE AS Longitude", "./TestData/openschemas_chatgpt4o/data_161.json"]
[162, "MATCH (r:N$REGISTRATIONS {ID: 1})-[e:E$REGISTRATIONS2USERS]->(u:N$USERS) RETURN r.USER_ID AS USER_ID, r.EMAIL AS EMAIL, r.FIRST_NAME AS FIRST_NAME, r.LAST_NAME AS LAST_NAME, r.ADDRESS AS ADDRESS, r.ADDRESS2 AS ADDRESS2, r.CITY AS CITY, r.STATE AS STATE, r.ZIP AS ZIP, r.PHONE_NUMBER AS PHONE_NUMBER, r.PROFESSION AS PROFESSION, r.EMPLOYER AS EMPLOYER, r.EDUCATION AS EDUCATION, r.ABOUT2030 AS ABOUT2030", "./TestData/openschemas_chatgpt4o/data_162.json"]
[163, "MATCH (reg:N$REGISTRATIONS {ID: 1})-[:E$REGISTRATIONS2USERS]->(user:N$USERS) RETURN reg.USER_ID AS USER_ID, reg.EMAIL AS EMAIL, reg.FIRST_NAME AS FIRST_NAME, reg.LAST_NAME AS LAST_NAME, reg.ADDRESS AS ADDRESS, reg.ADDRESS2 AS ADDRESS2, reg.CITY AS CITY, reg.STATE AS STATE, reg.ZIP AS ZIP, reg.PHONE_NUMBER AS PHONE_NUMBER, reg.PROFESSION AS PROFESSION, reg.EMPLOYER AS EMPLOYER, reg.EDUCATION AS EDUCATION, reg.ABOUT2030 AS ABOUT2030", "./TestData/openschemas_chatgpt4o/data_163.json"]
[164, "MATCH (ua:N$USER_ADDRESSES {ID: 1})-[:E$USER_ADDRESSES2USERS]->(u:N$USERS) RETURN ua.UPDATED_AT", "./TestData/openschemas_chatgpt4o/data_164.json"]
[165, "MATCH (ua:N$USER_ADDRESSES {ID: 1}) RETURN ua.UPDATED_AT", "./TestData/openschemas_chatgpt4o/data_165.json"]
[166, "MATCH (ea:N$EMAIL_ADDRESSES)-[rel:E$EMAIL_ADDRESSES2USERS]->(u:N$USERS) WHERE ea.ID = 1 RETURN u.ID, u.FIRST_NAME, u.LAST_NAME, u.URL_FRIENDLY, u.EMAIL, u.CRYPTED_PASSWORD, u.PASSWORD_SALT, u.PERSISTENCE_TOKEN, u.SINGLE_ACCESS_TOKEN, u.PERISHABLE_TOKEN, u.LOGIN_COUNT, u.FAILED_LOGIN_COUNT, u.LAST_REQUEST_AT, u.CURRENT_LOGIN_AT, u.LAST_LOGIN_AT, u.CURRENT_LOGIN_IP, u.LAST_LOGIN_IP, u.JOINED_AT, u.EXPIRED_AT, u.ACTIVATED_AT, u.ACTIVE, u.ACTIVATED", "./TestData/openschemas_chatgpt4o/data_166.json"]
[167, "MATCH (ea:N$EMAIL_ADDRESSES)-[r:E$EMAIL_ADDRESSES2USERS]->(u:N$USERS) WHERE ea.ID = 1 RETURN u.ID, u.FIRST_NAME, u.LAST_NAME, u.URL_FRIENDLY, u.EMAIL, u.CRYPTED_PASSWORD, u.PASSWORD_SALT, u.PERSISTENCE_TOKEN, u.SINGLE_ACCESS_TOKEN, u.PERISHABLE_TOKEN, u.LOGIN_COUNT, u.FAILED_LOGIN_COUNT, u.LAST_REQUEST_AT, u.CURRENT_LOGIN_AT, u.LAST_LOGIN_AT, u.CURRENT_LOGIN_IP, u.LAST_LOGIN_IP, u.JOINED_AT, u.EXPIRED_AT, u.ACTIVATED_AT, u.ACTIVE, u.ACTIVATED", "./TestData/openschemas_chatgpt4o/data_167.json"]
[168, "MATCH (n:N$ADMIN_USERS {ID: 1}) RETURN n.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_168.json"]
[169, "MATCH (admin_user:N$ADMIN_USERS {ID: 1}) RETURN admin_user.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_169.json"]
[170, "MATCH (admin:N$ADMIN_USERS {ID: 1}) RETURN admin.UPDATED_AT", "./TestData/openschemas_chatgpt4o/data_170.json"]
[171, "MATCH (adminUser:N$ADMIN_USERS {ID: 1}) RETURN adminUser.UPDATED_AT", "./TestData/openschemas_chatgpt4o/data_171.json"]
[172, "MATCH (v:N$VIDEOS {ID: 1})-[:E$VIDEOS2USERS]->(u:N$USERS) OPTIONAL MATCH (v)-[:E$VIDEOS2FEEDS]->(f:N$FEEDS) RETURN u.ID AS USER_ID, v.TITLE AS TITLE, v.VENDOR AS VENDOR, v.UID AS UID, v.URL AS URL, v.PUBLIC AS PUBLIC, v.LOCATION AS LOCATION, v.MAKER AS MAKER, v.PLAYERS AS PLAYERS, v.FOR_FEEDBACK AS FOR_FEEDBACK, f.ID AS FEED_ID", "./TestData/openschemas_chatgpt4o/data_172.json"]
[173, "MATCH (v:N$VIDEOS {ID: 1})-[:E$VIDEOS2USERS]->(u:N$USERS), (v)-[:E$VIDEOS2FEEDS]->(f:N$FEEDS) RETURN u.ID AS USER_ID, v.TITLE AS TITLE, v.VENDOR AS VENDOR, v.UID AS UID, v.URL AS URL, v.PUBLIC AS PUBLIC, v.LOCATION AS LOCATION, v.MAKER AS MAKER, v.PLAYERS AS PLAYERS, v.FOR_FEEDBACK AS FOR_FEEDBACK, f.ID AS FEED_ID", "./TestData/openschemas_chatgpt4o/data_173.json"]
[174, "MATCH (t1:N$TAGGINGS)-[:E$TAGGINGS2TAGS]->(t2:N$TAGS) WHERE t1.ID = 1 RETURN t2.ID, t2.NAME", "./TestData/openschemas_chatgpt4o/data_174.json"]
[175, "MATCH (video:N$VIDEOS)-[:E$VIDEOS2USERS]->(user:N$USERS), (video)-[:E$VIDEOS2FEEDS]->(feed:N$FEEDS) WHERE video.ID = 1 RETURN user.ID AS USER_ID, video.TITLE AS TITLE, video.VENDOR AS VENDOR, video.UID AS UID, video.URL AS URL, video.PUBLIC AS PUBLIC, video.LOCATION AS LOCATION, video.MAKER AS MAKER, video.PLAYERS AS PLAYERS, video.FOR_FEEDBACK AS FOR_FEEDBACK, feed.ID AS FEED_ID", "./TestData/openschemas_chatgpt4o/data_175.json"]
[176, "MATCH (mpt:N$MATH_PROBLEM_TEMPLATES {ID: 1}) OPTIONAL MATCH (pl:N$PROBLEM_LEVELS)-[:E$PROBLEM_LEVELS2MATH_PROBLEM_TEMPLATES]->(mpt) RETURN mpt.LESSON_ID AS LESSON_ID, mpt.INSTRUCTION_ID AS INSTRUCTION_ID, pl.DIFFICULTY AS DIFFICULTY, mpt.DISPLAY_MODE AS DISPLAY_MODE", "./TestData/openschemas_chatgpt4o/data_176.json"]
[177, "MATCH (t1:N$MATH_PROBLEMS {ID: 1})-[:E$MATH_PROBLEMS2MATH_PROBLEM_TEMPLATES]->(t2:N$MATH_PROBLEM_TEMPLATES) RETURN t2.LESSON_ID, t2.INSTRUCTION_ID, t2.DIFFICULTY, t2.DISPLAY_MODE; ", "./TestData/openschemas_chatgpt4o/data_177.json"]
[178, "MATCH (w:N$WORKSHEETS) WHERE w.ID = 1 RETURN w.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_178.json"]
[179, "MATCH (w:N$WORKSHEETS {ID: 1}) RETURN w.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_179.json"]
[180, "MATCH (w:N$WORKSHEETS) WHERE w.ID = 1 RETURN w.UPDATED_AT", "./TestData/openschemas_chatgpt4o/data_180.json"]
[181, "MATCH (w:N$WORKSHEETS) WHERE w.ID = 1 RETURN w.UPDATED_AT", "./TestData/openschemas_chatgpt4o/data_181.json"]
[182, "MATCH (mp:N$MATH_PROBLEMS)-[e:E$MATH_PROBLEMS2PROBLEM_LEVELS]->(pl:N$PROBLEM_LEVELS)-[e2:E$PROBLEM_LEVELS2MATH_PROBLEM_TEMPLATES]->(mpt:N$MATH_PROBLEM_TEMPLATES) WHERE mpt.ID = 1 RETURN mp.ID AS ID, mpt.ID AS MATH_PROBLEM_TEMPLATE_ID, mp.QUESTION_MARKUP AS QUESTION_MARKUP, mp.ANSWER_MARKUP AS ANSWER_MARKUP", "./TestData/openschemas_chatgpt4o/data_182.json"]
[183, "MATCH (mp:N$MATH_PROBLEMS)-[e:E$MATH_PROBLEMS2MATH_PROBLEM_TEMPLATES]->(mpt:N$MATH_PROBLEM_TEMPLATES) WHERE mpt.ID = 1 RETURN mp.ID, mp.MATH_PROBLEM_TEMPLATE_ID AS PROBLEM_LEVEL_ID, mp.QUESTION_MARKUP, mp.ANSWER_MARKUP", "./TestData/openschemas_chatgpt4o/data_183.json"]
[184, "MATCH (c:N$CARTS) WHERE c.ID = 1 RETURN c.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_184.json"]
[185, "MATCH (cart:N$CARTS) WHERE cart.ID = 1 RETURN cart.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_185.json"]
[186, "MATCH (u:N$USERS) WHERE u.ID = 1 RETURN u.NAME, u.PASSWORD_DIGEST, u.ADMIN, u.USERNAME", "./TestData/openschemas_chatgpt4o/data_186.json"]
[187, "MATCH (u:N$USERS) WHERE u.ID = 1 RETURN u.NAME, u.PASSWORD_DIGEST, u.ADMIN, u.USERNAME", "./TestData/openschemas_chatgpt4o/data_187.json"]
[188, "MATCH (c:N$COMMENTS) WHERE c.ID = 1 RETURN c.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_188.json"]
[189, "MATCH (c:N$COMMENTS) WHERE c.ID = 1 RETURN c.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_189.json"]
[190, "MATCH (dj_genre:N$DJ_GENRES) WHERE dj_genre.ID = 1 RETURN dj_genre.DJ_ID AS DJ_ID, dj_genre.GENRE_ID AS GENRE_ID", "./TestData/openschemas_chatgpt4o/data_190.json"]
[191, "MATCH (dj_genre:N$DJ_GENRES) WHERE dj_genre.ID = 1 RETURN dj_genre.DJ_ID AS DJ_ID, dj_genre.GENRE_ID AS GENRE_ID", "./TestData/openschemas_chatgpt4o/data_191.json"]
[192, "MATCH (d:N$DJS) WHERE d.ID = 1 RETURN d.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_192.json"]
[193, "MATCH (dj:N$DJS) WHERE dj.ID = 1 RETURN dj.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_193.json"]
[194, "MATCH (d: N$DJ_GENRES)-[e: E$DJ_GENRES2GENRES]->(g: N$GENRES) WHERE g.ID = 1 RETURN d.ID, d.DJ_ID, d.GENRE_ID", "./TestData/openschemas_chatgpt4o/data_194.json"]
[195, "MATCH (dj_genre:N$DJ_GENRES)-[e: E$DJ_GENRES2GENRES]->(genre:N$GENRES) WHERE genre.ID = 1  RETURN dj_genre.ID AS ID, dj_genre.DJ_ID AS DJ_ID, dj_genre.GENRE_ID AS GENRE_ID", "./TestData/openschemas_chatgpt4o/data_195.json"]
[196, "MATCH (sc: N$STORAGE_CHARGES) WHERE sc.ID = 1 RETURN sc.BOX_ID, sc.CHARGE_ID, sc.START_DATE, sc.END_DATE, sc.STORAGE_CHARGE_PROCESSING_RECORD_ID", "./TestData/openschemas_chatgpt4o/data_196.json"]
[197, "MATCH (sc:N$STORAGE_CHARGES {ID: 1}) RETURN sc.BOX_ID AS BOX_ID, sc.CHARGE_ID AS CHARGE_ID, sc.START_DATE AS START_DATE, sc.END_DATE AS END_DATE, sc.STORAGE_CHARGE_PROCESSING_RECORD_ID AS STORAGE_CHARGE_PROCESSING_RECORD_ID", "./TestData/openschemas_chatgpt4o/data_197.json"]
[198, "MATCH (O:N$ORDERS)-[R:E$ORDERS2CARTS]->(C:N$CARTS) WHERE O.ID = 1 RETURN C.ID AS cartId, C.USER_ID AS userId, C.ORDERED_AT AS orderedAt, C.STATUS AS status, C.QUOTED_SHIPPING_COST AS quotedShippingCost, C.QUOTED_SHIPPING_COST_SUCCESS AS quotedShippingCostSuccess", "./TestData/openschemas_chatgpt4o/data_198.json"]
[199, "MATCH (o:N$ORDERS)-[:E$ORDERS2CARTS]->(c:N$CARTS) WHERE o.ID = 1 RETURN c.ID AS cartId, c.USER_ID AS userId, c.ORDERED_AT AS orderedAt, c.STATUS AS status, c.QUOTED_SHIPPING_COST AS quotedShippingCost, c.QUOTED_SHIPPING_COST_SUCCESS AS quotedShippingCostSuccess", "./TestData/openschemas_chatgpt4o/data_199.json"]
[200, "MATCH (T1:N$RENTAL_AGREEMENT_VERSIONS_USERS)-[:E$RENTAL_AGREEMENT_VERSIONS_USERS2RENTAL_AGREEMENT_VERSIONS]->(T2:N$RENTAL_AGREEMENT_VERSIONS) WHERE T1.ID = 1 RETURN T2.ID, T2.AGREEMENT_TEXT ", "./TestData/openschemas_chatgpt4o/data_200.json"]
[201, "MATCH (T1:N$RENTAL_AGREEMENT_VERSIONS_USERS)-[:E$RENTAL_AGREEMENT_VERSIONS_USERS2RENTAL_AGREEMENT_VERSIONS]->(T2:N$RENTAL_AGREEMENT_VERSIONS) WHERE T1.ID = 1 RETURN T2.ID, T2.AGREEMENT_TEXT", "./TestData/openschemas_chatgpt4o/data_201.json"]
[202, "MATCH (gp:N$GROUPS_PERMISSIONS) WHERE gp.ID = 1 RETURN gp.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_202.json"]
[203, "MATCH (gp:N$GROUPS_PERMISSIONS {ID: 1}) RETURN gp.CREATED_AT", "./TestData/openschemas_chatgpt4o/data_203.json"]
[204, "MATCH (u:N$USERS {ID: 1}) RETURN u.UPDATED_AT", "./TestData/openschemas_chatgpt4o/data_204.json"]
[205, "MATCH (user:N$USERS) WHERE user.ID = 1 RETURN user.UPDATED_AT", "./TestData/openschemas_chatgpt4o/data_205.json"]
